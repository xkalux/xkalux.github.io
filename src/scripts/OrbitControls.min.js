THREE.OrbitControls = function (t, e) { this.object = t, this.domElement = void 0 !== e ? e : document, this.enabled = !0, this.target = new THREE.Vector3, this.center = this.target, this.noZoom = !1, this.zoomSpeed = 1, this.minDistance = 0, this.maxDistance = 1 / 0, this.minZoom = 0, this.maxZoom = 1 / 0, this.noRotate = !1, this.rotateSpeed = 1, this.noPan = !1, this.keyPanSpeed = 7, this.autoRotate = !1, this.autoRotateSpeed = 2, this.minPolarAngle = 0, this.maxPolarAngle = Math.PI, this.minAzimuthAngle = -1 / 0, this.maxAzimuthAngle = 1 / 0, this.noKeys = !1, this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 }, this.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT }; var o, n, a = this, i = 1e-6, s = new THREE.Vector2, c = new THREE.Vector2, r = new THREE.Vector2, h = new THREE.Vector2, u = new THREE.Vector2, d = new THREE.Vector2, l = new THREE.Vector3, m = new THREE.Vector3, p = new THREE.Vector2, E = new THREE.Vector2, b = new THREE.Vector2, f = 0, T = 0, y = 1, O = new THREE.Vector3, v = new THREE.Vector3, g = new THREE.Quaternion, R = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY: 4, TOUCH_PAN: 5 }, H = R.NONE; this.target0 = this.target.clone(), this.position0 = this.object.position.clone(), this.zoom0 = this.object.zoom; var M = (new THREE.Quaternion).setFromUnitVectors(t.up, new THREE.Vector3(0, 1, 0)), P = M.clone().inverse(), j = { type: "change" }, N = { type: "start" }, L = { type: "end" }; function w() { return 2 * Math.PI / 60 / 60 * a.autoRotateSpeed } function A() { return Math.pow(.95, a.zoomSpeed) } function x(t) { if (!1 !== a.enabled) { t.preventDefault(); var e = a.domElement === document ? a.domElement.body : a.domElement; if (H === R.ROTATE) { if (!0 === a.noRotate) return; c.set(t.clientX, t.clientY), r.subVectors(c, s), a.rotateLeft(2 * Math.PI * r.x / e.clientWidth * a.rotateSpeed), a.rotateUp(2 * Math.PI * r.y / e.clientHeight * a.rotateSpeed), s.copy(c) } else if (H === R.DOLLY) { if (!0 === a.noZoom) return; E.set(t.clientX, t.clientY), b.subVectors(E, p), b.y > 0 ? a.dollyIn() : b.y < 0 && a.dollyOut(), p.copy(E) } else if (H === R.PAN) { if (!0 === a.noPan) return; u.set(t.clientX, t.clientY), d.subVectors(u, h), a.pan(d.x, d.y), h.copy(u) } H !== R.NONE && a.update() } } function k() { !1 !== a.enabled && (document.removeEventListener("mousemove", x, !1), document.removeEventListener("mouseup", k, !1), a.dispatchEvent(L), H = R.NONE) } function C(t) { if (!1 !== a.enabled && !0 !== a.noZoom && H === R.NONE) { t.preventDefault(), t.stopPropagation(); var e = 0; void 0 !== t.wheelDelta ? e = t.wheelDelta : void 0 !== t.detail && (e = -t.detail), e > 0 ? a.dollyOut() : e < 0 && a.dollyIn(), a.update(), a.dispatchEvent(N), a.dispatchEvent(L) } } this.rotateLeft = function (t) { void 0 === t && (t = w()), T -= t }, this.rotateUp = function (t) { void 0 === t && (t = w()), f -= t }, this.panLeft = function (t) { var e = this.object.matrix.elements; l.set(e[0], e[1], e[2]), l.multiplyScalar(-t), O.add(l) }, this.panUp = function (t) { var e = this.object.matrix.elements; l.set(e[4], e[5], e[6]), l.multiplyScalar(t), O.add(l) }, this.pan = function (t, e) { var o = a.domElement === document ? a.domElement.body : a.domElement; if (a.object instanceof THREE.PerspectiveCamera) { var n = a.object.position.clone().sub(a.target).length(); n *= Math.tan(a.object.fov / 2 * Math.PI / 180), a.panLeft(2 * t * n / o.clientHeight), a.panUp(2 * e * n / o.clientHeight) } else a.object instanceof THREE.OrthographicCamera ? (a.panLeft(t * (a.object.right - a.object.left) / o.clientWidth), a.panUp(e * (a.object.top - a.object.bottom) / o.clientHeight)) : console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.") }, this.dollyIn = function (t) { void 0 === t && (t = A()), a.object instanceof THREE.PerspectiveCamera ? y /= t : a.object instanceof THREE.OrthographicCamera ? (a.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom * t)), a.object.updateProjectionMatrix(), a.dispatchEvent(j)) : console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.") }, this.dollyOut = function (t) { void 0 === t && (t = A()), a.object instanceof THREE.PerspectiveCamera ? y *= t : a.object instanceof THREE.OrthographicCamera ? (a.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / t)), a.object.updateProjectionMatrix(), a.dispatchEvent(j)) : console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.") }, this.update = function () { var t = this.object.position; m.copy(t).sub(this.target), m.applyQuaternion(M), o = Math.atan2(m.x, m.z), n = Math.atan2(Math.sqrt(m.x * m.x + m.z * m.z), m.y), this.autoRotate && H === R.NONE && this.rotateLeft(w()), o += T, n += f, o = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, o)), n = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, n)), n = Math.max(i, Math.min(Math.PI - i, n)); var e = m.length() * y; e = Math.max(this.minDistance, Math.min(this.maxDistance, e)), this.target.add(O), m.x = e * Math.sin(n) * Math.sin(o), m.y = e * Math.cos(n), m.z = e * Math.sin(n) * Math.cos(o), m.applyQuaternion(P), t.copy(this.target).add(m), this.object.lookAt(this.target), T = 0, f = 0, y = 1, O.set(0, 0, 0), (v.distanceToSquared(this.object.position) > i || 8 * (1 - g.dot(this.object.quaternion)) > i) && (this.dispatchEvent(j), v.copy(this.object.position), g.copy(this.object.quaternion)) }, this.reset = function () { H = R.NONE, this.target.copy(this.target0), this.object.position.copy(this.position0), this.object.zoom = this.zoom0, this.object.updateProjectionMatrix(), this.dispatchEvent(j), this.update() }, this.getPolarAngle = function () { return n }, this.getAzimuthalAngle = function () { return o }, this.domElement.addEventListener("contextmenu", (function (t) { t.preventDefault() }), !1), this.domElement.addEventListener("mousedown", (function (t) { if (!1 !== a.enabled) { if (t.preventDefault(), t.button === a.mouseButtons.ORBIT) { if (!0 === a.noRotate) return; H = R.ROTATE, s.set(t.clientX, t.clientY) } else if (t.button === a.mouseButtons.ZOOM) { if (!0 === a.noZoom) return; H = R.DOLLY, p.set(t.clientX, t.clientY) } else if (t.button === a.mouseButtons.PAN) { if (!0 === a.noPan) return; H = R.PAN, h.set(t.clientX, t.clientY) } H !== R.NONE && (document.addEventListener("mousemove", x, !1), document.addEventListener("mouseup", k, !1), a.dispatchEvent(N)) } }), !1), this.domElement.addEventListener("mousewheel", C, !1), this.domElement.addEventListener("DOMMouseScroll", C, !1), this.domElement.addEventListener("touchstart", (function (t) { if (!1 !== a.enabled) { switch (t.touches.length) { case 1: if (!0 === a.noRotate) return; H = R.TOUCH_ROTATE, s.set(t.touches[0].pageX, t.touches[0].pageY); break; case 2: if (!0 === a.noZoom) return; H = R.TOUCH_DOLLY; var e = t.touches[0].pageX - t.touches[1].pageX, o = t.touches[0].pageY - t.touches[1].pageY, n = Math.sqrt(e * e + o * o); p.set(0, n); break; case 3: if (!0 === a.noPan) return; H = R.TOUCH_PAN, h.set(t.touches[0].pageX, t.touches[0].pageY); break; default: H = R.NONE }H !== R.NONE && a.dispatchEvent(N) } }), !1), this.domElement.addEventListener("touchend", (function () { !1 !== a.enabled && (a.dispatchEvent(L), H = R.NONE) }), !1), this.domElement.addEventListener("touchmove", (function (t) { if (!1 !== a.enabled) { t.preventDefault(), t.stopPropagation(); var e = a.domElement === document ? a.domElement.body : a.domElement; switch (t.touches.length) { case 1: if (!0 === a.noRotate) return; if (H !== R.TOUCH_ROTATE) return; c.set(t.touches[0].pageX, t.touches[0].pageY), r.subVectors(c, s), a.rotateLeft(2 * Math.PI * r.x / e.clientWidth * a.rotateSpeed), a.rotateUp(2 * Math.PI * r.y / e.clientHeight * a.rotateSpeed), s.copy(c), a.update(); break; case 2: if (!0 === a.noZoom) return; if (H !== R.TOUCH_DOLLY) return; var o = t.touches[0].pageX - t.touches[1].pageX, n = t.touches[0].pageY - t.touches[1].pageY, i = Math.sqrt(o * o + n * n); E.set(0, i), b.subVectors(E, p), b.y > 0 ? a.dollyOut() : b.y < 0 && a.dollyIn(), p.copy(E), a.update(); break; case 3: if (!0 === a.noPan) return; if (H !== R.TOUCH_PAN) return; u.set(t.touches[0].pageX, t.touches[0].pageY), d.subVectors(u, h), a.pan(d.x, d.y), h.copy(u), a.update(); break; default: H = R.NONE } } }), !1), window.addEventListener("keydown", (function (t) { if (!1 !== a.enabled && !0 !== a.noKeys && !0 !== a.noPan) switch (t.keyCode) { case a.keys.UP: a.pan(0, a.keyPanSpeed), a.update(); break; case a.keys.BOTTOM: a.pan(0, -a.keyPanSpeed), a.update(); break; case a.keys.LEFT: a.pan(a.keyPanSpeed, 0), a.update(); break; case a.keys.RIGHT: a.pan(-a.keyPanSpeed, 0), a.update() } }), !1), this.update() }, THREE.OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype), THREE.OrbitControls.prototype.constructor = THREE.OrbitControls