const x_shortcut_template = document.createElement("template"); x_shortcut_template.innerHTML = '\n<div class="shortcut">\n    <div class="shortcut-icon"></div>\n    <div class="shortcut-name">New Short-Cut</div>\n</div>\n', window.customElements.define("x-shortcut", class extends HTMLElement { constructor() { super() } static observedAttributes = ["icon", "name", "position"]; attributeChangedCallback(t, e, n) { switch (t) { case "icon": if (!this.iconElement) return; "" !== n && (this.iconElement.style.setProperty("-webkit-mask-image", n), this.iconElement.style.setProperty("mask-image", n)); break; case "name": if (!this.nameElement) return; "" !== n && (this.nameElement.textContent = n); break; case "position": let t; if ("" !== n && (t = n.split(",")), 2 !== t.length) return; this.style.left = t[0] + "px", this.style.top = t[1] + "px" } } connectedCallback() { this.appendChild(x_shortcut_template.content.cloneNode(!0)), this.nameElement = this.querySelector(".shortcut-name"), this.iconElement = this.querySelector(".shortcut-icon"); const t = this.attributes.getNamedItem("name")?.value; t && this.nameElement && (this.nameElement.textContent = t); const e = this.attributes.getNamedItem("icon")?.value; e && (this.iconElement.style.setProperty("-webkit-mask-image", e), this.iconElement.style.setProperty("mask-image", e)), this.iconElement.addEventListener("click", this.handleOnClick), this.nameElement.addEventListener("mousedown", (t => { this.style.cursor = "move", this.startDrag(t) })) } handleOnClick = () => console.log("click on " + this.nameElement.textContent); startDrag(t) { let e = !0; const n = t.clientX - this.getBoundingClientRect().left, s = t.clientY - this.getBoundingClientRect().top, i = function (t) { e && (this.style.left = t.clientX - n + "px", this.style.top = t.clientY - s + "px") }; this.addEventListener("mousemove", i), this.addEventListener("mouseup", (t => { e = !1, this.style.cursor = "default", this.removeEventListener("mousemove", i) })) } setAttributes(t) { for (const e in t) this.setAttribute(e, t[e]) } })