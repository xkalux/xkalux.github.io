const x_window_template = document.createElement("template"); x_window_template.innerHTML = '\n<div class="window">\n    <div class="status-bar">\n        <span class="buttons">\n            <ul>\n                <li><a href="#" class="btn-close"></a></li>\n                <li><a href="#" class="btn-min"></a></li>\n                <li><a href="#" class="btn-max"></a></li>\n            </ul>\n        </span>\n        <span class="title">New Window !!</span>\n    </div>\n    <div class="content"></div>\n</div>\n<div class=\'logger\'></div>\n', window.customElements.define("x-window", class extends HTMLElement { constructor() { super() } setActiveThisWindow() { document.querySelectorAll("x-window").forEach((t => { t.windowElement.classList.remove("active"), t.style.zIndex = 0 })), this.windowElement.classList.add("active"), this.style.zIndex = 1 } static observedAttributes = ["window-title", "window-class", "window-content", "window-width"]; attributeChangedCallback(t, e, s) { switch (t) { case "window-title": "" !== s && this.titleElement && (this.titleElement.textContent = s); break; case "window-class": "" !== s && this.windowElement && this.windowElement.classList.add(s); break; case "window-content": this.contentElement && (this.contentElement.textContent = s); break; case "window-width": "" !== s && this.windowElement && (this.windowElement.style.width = s) } } close() { this.handleBeforeClose(), this.remove() } doBeforeCreate = () => { }; handleBeforeClose = () => { }; connectedCallback() { this.appendChild(x_window_template.content.cloneNode(!0)), this.statusbarElement = this.querySelector(".status-bar"), this.contentElement = this.querySelector(".content"), this.titleElement = this.querySelector(".title"), this.windowElement = this.querySelector(".window"), this.btn_close = this.querySelector(".btn-close"), this.btn_minimize = this.querySelector(".btn-min"), this.btn_maximize = this.querySelector(".btn-max"), this.id = "XWIN-xxxxxxxx-yyyy-xxxx-yxyx-xxxxxxxxxxxx".replace(/[xy]/g, (function (t) { var e = 16 * Math.random() | 0; return ("x" == t ? e : 3 & e | 8).toString(16) })); const t = this.attributes.getNamedItem("window-title")?.value, e = this.attributes.getNamedItem("window-class")?.value, s = this.attributes.getNamedItem("window-content")?.value, i = this.attributes.getNamedItem("window-width")?.value; t && (this.titleElement.textContent = t), s && (this.contentElement.textContent = s), e && this.windowElement.classList.add(e), i && (this.windowElement.style.width = i), this.windowElement.addEventListener("mousedown", (() => { this.windowElement.classList.contains("active") || this.setActiveThisWindow() })), this.setActiveThisWindow(), this.windowElement.addEventListener("mouseenter", (t => { this.startWatch() })), this.statusbarElement.addEventListener("mousedown", (t => { this.statusbarElement.style.cursor = "move", this.startDrag(t) })), this.statusbarElement.addEventListener("mousedown", (t => { t.preventDefault() })), this.windowElement.addEventListener("mousedown", (t => { this.startResize(t) })), this.windowElement.addEventListener("mousedown", (t => { t.preventDefault() })), this.btn_close.addEventListener("click", (t => { this.handleBeforeClose(), this.remove() })), this.btn_minimize.addEventListener("click", (t => { this.windowElement.classList.remove("maximize"), this.windowElement.classList.toggle("minimize") })), this.btn_maximize.addEventListener("click", (t => { this.windowElement.classList.remove("minimize"), this.windowElement.classList.toggle("maximize"), this.toggleFullScreen() })), this.doBeforeCreate(this) } get isFullScreen() { return this.windowElement.classList.contains("maximize") } history = {}; toggleFullScreen() { this.isFullScreen ? (this.history.left = this.style.left, this.history.top = this.style.top, this.history.width = this.style.width, this.history.height = this.style.height, this.style.left = 0, this.style.top = 0, this.style.width = "calc(100% - 3px)", this.style.height = "calc(100% - 3px)") : (this.style.left = this.history.left, this.style.top = this.history.top, this.style.width = this.history.width, this.style.height = this.history.height) } startWatch() { const t = function (t) { const e = this.windowElement.getBoundingClientRect(), s = e.top + this.threshold, i = e.top + e.height - this.threshold, n = e.left + this.threshold, o = e.right - this.threshold; this.isMouseOverRight = t.clientX > o, this.isMouseOverLeft = t.clientX < n, this.isMouseOverTop = t.clientY < s, this.isMouseOverBottom = t.clientY > i, this.isMouseOverTopLeft = this.isMouseOverTop && this.isMouseOverLeft, this.isMouseOverTopRight = this.isMouseOverTop && this.isMouseOverRight, this.isMouseOverBottomLeft = this.isMouseOverBottom && this.isMouseOverLeft, this.isMouseOverBottomRight = this.isMouseOverBottom && this.isMouseOverRight, this.isMouseOverTopRight || this.isMouseOverBottomLeft ? this.windowElement.style.cursor = "nesw-resize" : this.isMouseOverBottomRight || this.isMouseOverTopLeft ? this.windowElement.style.cursor = "nwse-resize" : this.isMouseOverTop || this.isMouseOverBottom ? this.windowElement.style.cursor = "ns-resize" : this.isMouseOverLeft || this.isMouseOverRight ? this.windowElement.style.cursor = "ew-resize" : this.windowElement.style.cursor = "default" }; this.addEventListener("mousemove", t), this.addEventListener("mouseleave", (e => { this.removeEventListener("mousemove", t) })) } startDrag(t) { let e = !0; const s = document.querySelector("body").getBoundingClientRect(), i = this.getBoundingClientRect(), n = t.clientX - this.getBoundingClientRect().left, o = t.clientY - this.getBoundingClientRect().top, h = function (t) { if (!e) return; const h = t.clientX - n, l = t.clientY - o, r = Math.max(0, Math.min(h, s.width - i.width)), d = Math.max(0, Math.min(l, s.height - i.height)); this.style.left = r + "px", this.style.top = d + "px" }; this.addEventListener("mousemove", h), this.addEventListener("mouseup", (t => { e = !1, this.statusbarElement.style.cursor = "default", this.removeEventListener("mousemove", h) })) } threshold = 15; startResize(t) { if (this.isFullScreen) return; const e = document.querySelector("body").getBoundingClientRect(), s = this.windowElement.getBoundingClientRect(), i = t.clientX - s.left, n = t.clientY - s.top, o = s.width, h = s.height, l = s.left, r = s.top, d = this.windowElement, a = this, c = this.isMouseOverRight, m = this.isMouseOverBottom, w = this.isMouseOverLeft, u = this.isMouseOverTop, v = e.width - e.left - 2, E = .8 * o + 0 * l, x = function (t) { if (c) { const e = o + (t.clientX - s.left - i), n = Math.min(e, v); d.style.width = n + "px" } if (m) { const e = h + (t.clientY - s.top - n); d.style.height = e + "px" } if (w) { const e = Math.max(0, t.clientX - i), s = o - (e - l), n = Math.min(s, v); e <= E && (a.style.left = e + "px", d.style.width = n + "px") } if (u) { const e = Math.max(0, t.clientY - n), s = h - (e - r); a.style.top = e + "px", d.style.height = s + "px" } }; document.addEventListener("mousemove", x), document.addEventListener("mouseup", (() => { document.removeEventListener("mousemove", x) })) } setAttributes(t) { for (const e in t) this.setAttribute(e, t[e]) } })