import { login, initUser, user } from "./_user.min.js"; import { terminalList, removeTerminalFromList, updateTerminal } from "./_terminal.min.js"; import { commands } from "./_terminal_completion.min.js"; import { folder, saveFolder, openScoreDataInWindow } from "./_class-data.min.js"; import { startSpinner, stopSpinner, spinners } from "./_spinner.min.js"; import { fonts, settingCommands, setSettingKey, getSettingKey } from "./_setting.min.js"; import { onWindowClose } from "./main.min.js"; import { getClassData, getScoreBySubject, cacheScore } from "../appscript/classx.min.js"; const functions = { cd: underconstruction, ls: underconstruction, dir: underconstruction, mkdir: underconstruction, rmdir: underconstruction, del: underconstruction, ren: underconstruction, info: function () { this.echo("open-terminal: " + terminalList.length), terminalList.forEach((e => { this.echo(" key: " + e.id) })) }, exit: function () { const e = this.data("id"); removeTerminalFromList(e), $(`#${e}`).remove(), onWindowClose() }, "use-default-setting": function () { this.echo("reset all your settings to the defaults !"), promptYesOrNO(this, (function () { const e = getSettingKey(); e && localStorage.removeItem(e), location.reload() })) }, refresh: updateTerminal, rename: cmd_change_title, "setting-list": cmd_setting, "log-in": login, "log-out": function () { promptYesOrNO(this, logout) }, slide, score, update: updateClassData, "--help": help }; function help() { this.echo("Use the [[i;#fff;]tab] key to autocomplete commands\nUse the [[i;#fff;]up] and [[i;#fff;]down] arrow keys to cycle through previously entered commands\n  [[i;#fff;]log-in / log-out] : as names says\n  [[i;#fff;]update] : update class slides\n  [[i;#fff;]slide] [[i;#efefef;]< -arg | --opt >] : open slide\n  [[i;#fff;]score] [[i;#efefef;]< -arg | --opt >] : view class score\n  [[i;#fff;]setting] [[i;#efefef;]< arg | --opt >] : fonts\n  [[i;#fff;]set-XXX] [[i;#efefef;]< -arg> ] : setting XXX \n    eg: [[i;#fff;]'set-font -VT323']\n    [[i;#fff;]colors] are specified using predefined color [[i;#fff;]names], or [[i;#fff;]RGB, HEX, HSL, RGBA, HSLA] values\n    [[i;#fff;]font-site] sets the size of the text [[i;#fff;]eg; 5px, 0.9em, 1.2rem]\n  [[i;#fff;]clear] : clear screen\n  [[i;#fff;]exit] : close terminal\n  [[i;#fff;]rename] [[i;#efefef;]< arg >] : rename Terminal title\n\n[[i;#e76f51;]ยังทำไม่เสร็จ ถ้าไม่ลืมจะกลับมาเขียนต่อ  😢]\n") } function underconstruction() { this.echo(" under construction 😢") } function promptYesOrNO(e, t = $.noop) { var o = e.history(); o.disable(), e.push((function (s) { s.match(/^(y|yes)$/i) ? (t(this), e.pop(), o.enable()) : s.match(/^(n|no)$/i) && (e.pop(), o.enable()) }), { prompt: "Are you sure? " }) } function cmd_setting(e, t = "") { if ("--help" === e) this.echo(" under construction 😢"); else switch (e) { case "-tetris": this.echo(" "), this.echo("Tetris setting list"), this.echo("-------------------------------"), Object.keys(settingCommands).forEach((e => { e.includes("set-tetris-") && this.echo(" [[b;#fff;] " + e + "] [[i;#fff;]<arg | opt>]") })); break; case "-window": this.echo(" "), this.echo("Window setting list"), this.echo("-------------------------------"), Object.keys(settingCommands).forEach((e => { e.includes("set-window-") && this.echo(" [[b;#fff;] " + e + "] [[i;#fff;]<arg | opt>]") })); break; case "-shortcut": this.echo(" "), this.echo("Shortcut setting list"), this.echo("-------------------------------"), Object.keys(settingCommands).forEach((e => { e.includes("set-shortcut-") && this.echo(" [[b;#fff;] " + e + "] [[i;#fff;]<arg | opt>]") })); break; case "-loading": this.echo(" "), this.echo("Loading setting list"), this.echo("-------------------------------"), Object.keys(settingCommands).forEach((e => { e.includes("set-loading-") && this.echo(" [[b;#fff;] " + e + "] [[i;#fff;]<arg | opt>]") })); break; case "-background": this.echo(" "), this.echo("Background setting list"), this.echo("-------------------------------"), Object.keys(settingCommands).forEach((e => { e.includes("set-background-") && this.echo(" [[b;#fff;] " + e + "] [[i;#fff;]<arg | opt>]") })); break; case "-folder": this.echo(" "), this.echo("Folder setting list"), this.echo("-------------------------------"), Object.keys(settingCommands).forEach((e => { e.includes("set-folder-") && this.echo(" [[b;#fff;] " + e + "] [[i;#fff;]<arg | opt>]") })); break; case "-scrollbar": this.echo(" "), this.echo("Scrollbar setting list"), this.echo("-------------------------------"), Object.keys(settingCommands).forEach((e => { e.includes("set-scrollbar-") && this.echo(" [[b;#fff;] " + e + "] [[i;#fff;]<arg | opt>]") })); break; case "-user-profile": this.echo(" "), this.echo("User-profile setting list"), this.echo("-------------------------------"), Object.keys(settingCommands).forEach((e => { e.includes("set-user-profile-") && this.echo(" [[b;#fff;] " + e + "] [[i;#fff;]<arg | opt>]") })); break; case "-score-report": this.echo(" "), this.echo("Score-report setting list"), this.echo("-------------------------------"), Object.keys(settingCommands).forEach((e => { e.includes("set-score-report-") && this.echo(" [[b;#fff;] " + e + "] [[i;#fff;]<arg | opt>]") })); break; case "-font-family": this.echo(" "), this.echo("List of fonts"), this.echo("-------------------------------"), Object.values(fonts).forEach((e => { this.echo(" " + e) })); break; default: this.echo(" not found: " + e + "  😢"), this.echo("  see> [[;orange;]font --help]"), this.echo(" ") } } function logout(e) { localStorage.removeItem("user"); getSettingKey && setSettingKey(void 0), e.echo(" See you next time! Don't forget to do your homework. 😊"), initUser() } function cmd_change_title(e, t) { if ("" === e) return; const o = t.data("id"); $(`#${o}`).attr("window-title", e) } function updateClassData() { startSpinner(this, spinners.dots), getClassData((e => { e ? (folder.home = e, saveFolder(), this.echo(" class data updated"), sessionStorage.setItem("LOG", "LOAD FOLDER - terminalFn"), updateCompletion("slide"), updateCompletion("score")) : (sessionStorage.setItem("LOG", "Invalid Token"), this.echo(" Update fail. !"), this.echo("     - error: invalid token."), this.echo("     - try `[[b;;]log-in]` command."), this.echo("     ")), stopSpinner(this) })) } function score(e) { if ("--help" === e) { if (!user.profile) return this.echo(" [[;red;]invalid token!] 😢"), this.echo(" fix use cmd> [[;orange;]login]"), void this.echo(" "); const e = user.profile?.email ?? "xxxxxxxxxxxxxxxxxxxxxx"; folder.home.datas.filter((t => "score" === t.TYPE && t["ENROLL-STDs"].includes(e))).map((e => e.TITLE.replace(/\s+/g, "-").toLowerCase())).forEach((e => { this.echo(" -" + e) })) } else { const t = user.profile?.email ?? "xxxxxxxxxxxxxxxxxxxxxx", o = folder.home.datas.filter((e => "score" === e.TYPE && e["ENROLL-STDs"].includes(t))).map((e => ({ TITLE: e.TITLE.replace(/\s+/g, "-").toLowerCase(), NAME: e.TITLE, URL: e.URL, SHEETS: e["DISPLAY-SHEETS"] }))); e = e.substring(1); if (o.some((t => t.TITLE === e))) { startSpinner(this, spinners.dots); const t = o.filter((t => t.TITLE === e)).map((e => ({ url: e.URL, sheetNameList: e.SHEETS.split(","), name: e.NAME })))[0], s = t.name; cacheScore(s) ? (terminalPrintScore(this, s), stopSpinner(this)) : getScoreBySubject(t, s, (e => { e ? terminalPrintScore(this, s) : (sessionStorage.setItem("LOG", "Invalid Token"), this.echo(" error: invalid token")), stopSpinner(this) })) } else this.echo(" not found: " + e + "  😢"), this.echo("  see> [[;orange;]score --help]"), this.echo(" ") } } function terminalPrintScore(e, t) { if (!cacheScore(t)) return e.echo(" something went wrong! 😢"), e.echo("  - pls, contact xkalux"), void e.echo(" "); e.echo(" "), e.echo(" Open: " + t), e.echo(" "), openScoreDataInWindow(t) } function slide(e) { if ("--help" === e) { folder.home.datas.filter((e => "slide" === e.TYPE)).map((e => e.TITLE.replace(/\s+/g, "-").toLowerCase())).forEach((e => { this.echo(" " + e) })) } else { const t = folder.home.datas.filter((e => "slide" === e.TYPE)).map((e => ({ TITLE: e.TITLE.replace(/\s+/g, "-").toLowerCase(), URL: e.URL }))); e = e.slice(1); if (t.some((t => t.TITLE === e))) { const o = t.filter((t => t.TITLE === e))[0]; this.echo(" open: " + e), window.open(o.URL, "_blank") } this.echo(" not found: " + e + "  😢"), this.echo("  see: [[;orange;]slide --help]"), this.echo(" ") } } function updateCompletion(e) { if ("slide" === e) { if (!folder?.home?.datas) return; const e = folder.home.datas.filter((e => "slide" === e.TYPE)).map((e => "-" + e.TITLE.replace(/\s+/g, "-").toLowerCase())); commands.slide = { options: ["help"], args: e } } if ("score" === e) { if (!folder?.home?.datas) return; const e = user.profile?.email ?? "xxxxxxxxxxxxxxxxxxxxxx", t = folder.home.datas.filter((t => "score" === t.TYPE && t["ENROLL-STDs"].includes(e))).map((e => "-" + e.TITLE.replace(/\s+/g, "-").toLowerCase())); commands.score = { options: ["help"], args: t } } } export { functions, updateCompletion }