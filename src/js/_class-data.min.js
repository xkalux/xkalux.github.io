import { local, getClassData, getScoreBySubject, cacheScore } from "../appscript/classx.min.js"; import { updateCompletion } from "./_terminal_functions.min.js"; import { createTerminal } from "./_terminal.min.js"; import { onWindowOpen, onWindowClose } from "./main.min.js"; let folder = {}, shortcutList = []; const underConstruct = "<div width=\"450px\" class='under-construction'>xx</div>\n<h4>under construction üò¢</h4>\n<h5>‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô <a href='#' class='underConstruct-click'>Terminal</a> ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô</h5>", loading = '<x-loading title=" "></x-loading>', key = "xclass", parent = document.querySelector("#desktop"); async function initClassData() { local(key) ? loadFolder() : getClassData((e => { e && (folder.home = e, saveFolder()) })), updateCompletion("slide"), updateCompletion("score"), initFolder() } function loadFolder() { const e = local(key); if (!e) return; const t = atob(e); folder = JSON.parse(t), sessionStorage.setItem("LOG", "Loadfolder") } function saveFolder() { if (!folder) return; const e = JSON.stringify(folder), t = btoa(e); localStorage.setItem(key, t), sessionStorage.setItem("LOG", "savefolder") } function initFolder() { createFolderShortcut("Slides", "url('./src/img/folder-hot-flame-burn-fire-svgrepo-com.svg')", (() => { createSlidesWindow(updateSlidesContent) })), createFolderShortcut("Scores", "url('./src/img/folder-favorite-heart-svgrepo-com.svg')", (() => { createScoreWindow(openScoreFolder) })), createFolderShortcut("User", "url('./src/img/folder-user-profile-svgrepo-com.svg')", (() => { createUserWindow($.noop) })), createFolderShortcut("License", "url('./src/img/file-exclamation-svgrepo-com.svg')", (() => { createLicenseMITfile($.noop) })) } function createSlidesWindow(e = (() => { })) { const t = document.createElement("x-window"); t.id = t.uid, t.setAttributes({ "window-width": .9 * document.documentElement.clientWidth + "px", "window-title": "Slides", "window-class": "slides-folder" }), t.doBeforeCreate = onWindowOpen, document.body.appendChild(t), t.style.top = "15%", t.contentElement.innerHTML = loading, t.handleBeforeClose = () => { onWindowClose(t) }, e(t) } function openScoreDataInWindow(e) { const t = cacheScore(e); let n = "<span> something went wrong! üò¢<span><br>&nbsp;&nbsp;- pls, contact xkalux"; if (t) { n = '<div class="score-report">'; JSON.parse(t).datas.datas.forEach((e => { n += `<h5 class='Catagory'>${e.sheetName}</h5>`; for (let t = 0; t < e.header.length; t++) { const o = e.header[t]; if (o.includes("_hide")) continue; const i = e.data[t].toString().split("\\n").join("<br>"); "" !== i && (n += `<h6><span class='header'>${o}</span><span class='data'>${i}</span></h6>`) } n += "<br>" })), n += "</div>" } const o = document.createElement("x-window"); o.id = o.uid, o.setAttributes({ "window-width": 2 * document.documentElement.clientWidth / 3 + "px", "window-title": e, "window-class": "score-data-folder" }), o.doBeforeCreate = onWindowOpen, document.body.appendChild(o), o.style.top = "0", o.style.left = "0", o.style.width = "100vw", o.windowElement.classList.add("maximize"), o.contentElement.innerHTML = n } function createLicenseMITfile(e) { const t = document.createElement("x-window"); t.id = t.uid, t.setAttributes({ "window-title": "LICENSE (MIT)", "window-class": "file-content" }), t.doBeforeCreate = onWindowOpen, document.body.appendChild(t), t.style.top = "0", t.style.left = "0", t.style.width = "100vw", t.windowElement.classList.add("maximize"), t.contentElement.innerHTML = "<h3>The MIT License (MIT)</h3>\n<pre>\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nCredit:\n <a href='https://terminal.jcubic.pl/' target='blank'>jQuery Terminal</a>\n <a href='https://codepen.io/kowlor/pen/ZYYQoy' target='blank'>Solar System animation - Pure CSS</a>\n <a href='https://codepen.io/marcobiedermann/pen/LLGwLb' target='blank'>Live Markdown Editor</a>\n <a href='https://codepen.io/teemujvi/pen/eGzqvy' target='blank'>Tetris AI</a>\n </pre>\n    ", t.handleBeforeClose = () => { onWindowClose(t) }, e() } function createUserWindow(e = (() => { })) { const t = document.createElement("x-window"); t.id = t.uid, t.setAttributes({ "window-width": 2 * document.documentElement.clientWidth / 3 + "px", "window-title": "User", "window-class": "user-folder" }), t.doBeforeCreate = onWindowOpen, document.body.appendChild(t), t.contentElement.innerHTML = underConstruct, t.querySelector(".underConstruct-click").addEventListener("click", createTerminal), t.handleBeforeClose = () => { onWindowClose(t), t.querySelector(".underConstruct-click").removeEventListener("click", createTerminal) }, e() } function createScoreWindow(e = (() => { })) { const t = document.createElement("x-window"); t.id = t.uid, t.setAttributes({ "window-width": 2 * document.documentElement.clientWidth / 3 + "px", "window-title": "Scores", "window-class": "score-folder" }), t.doBeforeCreate = onWindowOpen, document.body.appendChild(t), t.style.top = "20%", t.handleBeforeClose = () => { onWindowClose(t); t.querySelectorAll("." + t.id + "-select-subject").forEach((e => { e.removeEventListener("click", openSubjectFolder) })) }, e(t) } function openScoreFolder(e) { const t = local("user"); let n = "", o = !1; if (t) { o = !0; const i = JSON.parse(t); n += "<ul>"; const r = i.email ?? "xxxxxxxxxxxxxxxxxxxxxx"; folder.home.datas.filter((e => "score" === e.TYPE && e["ENROLL-STDs"].includes(r))).forEach((t => { n += `<li ><a href='#' \n            email='${r}'\n            class='${e.id}-select-subject' \n            SHEETS='${t["DISPLAY-SHEETS"]}' \n            URL='${t.URL}'>\n            ${t.TITLE}\n            </a></li>` })), n += "</ul>" } else n += "<pre>invalid token! üò¢</pre>", n += "<pre>To access this feature, please sign in.</pre>"; if (e.contentElement.innerHTML = n, o) { e.querySelectorAll("." + e.id + "-select-subject").forEach((e => { e.addEventListener("click", openSubjectFolder) })) } } function openSubjectFolder() { const e = { url: this.getAttribute("URL"), sheetNameList: this.getAttribute("SHEETS").split(",").map((e => e.trim())), name: this.textContent.trim() }, t = document.createElement("x-loading"), n = document.createElement("x-window"); n.id = n.uid, n.setAttributes({ "window-width": 2 * document.documentElement.clientWidth / 3 + "px", "window-title": e.name, "window-class": "score-folder" }), n.doBeforeCreate = onWindowOpen, document.body.appendChild(n), n.contentElement.appendChild(t), t.title = " ", n.style.top = "20%", n.handleBeforeClose = () => { onWindowClose(n) }; cacheScore(e.name) ? (t.remove(), openScoreDataInWindow(e.name), n.close()) : getScoreBySubject(e, e.name, (o => { t.remove(), o ? (openScoreDataInWindow(e.name), n.close()) : (n.contentElement.innerHTML = "<p>invalid token! üò¢</p>\n                <p>To access this feature, please sign in.</p>\n                ", sessionStorage.setItem("LOG", "Invalid Token")) })) } function createFolderShortcut(e, t, n) { if (!parent) return; const o = document.createElement("x-shortcut"); o.setAttributes({ name: e, icon: t }); const i = 120 + 95 * shortcutList.length; return o.style.top = i + "px", shortcutList.push({ key: e, element: o }), n && "function" == typeof n && (o.handleOnClick = n), parent.appendChild(o), o } function updateSlidesContent(e) { const t = document.querySelectorAll(".slides-folder .content"); let n = "- empty folder !!<br>user 'update' command in <a href='#' class='underConstruct-click'>Terminal</a> to fix"; if (!folder.home) return setContent(t, n), e.querySelector(".underConstruct-click").addEventListener("click", createTerminal), void (e.handleBeforeClose = () => { onWindowClose(e), e.querySelector(".underConstruct-click").removeEventListener("click", createTerminal) }); const o = folder.home.datas.filter((e => "slide" === e.TYPE)); n = "<ul>", o.forEach((e => { n += `<li><a href='${e.URL}' target='blank'>${e.TITLE}</a></li>` })), n += "</ul>", setContent(t, n) } function setContent(e, t) { e.forEach((e => { e.innerHTML = t })) } export { initClassData, folder, saveFolder, initFolder, shortcutList, openScoreDataInWindow }