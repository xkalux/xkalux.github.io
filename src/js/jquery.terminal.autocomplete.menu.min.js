/**@license
 *       __ _____                     ________                              __
 *      / // _  /__ __ _____ ___ __ _/__  ___/__ ___ ______ __ __  __ ___  / /
 *  __ / // // // // // _  // _// // / / // _  // _//     // //  \/ // _ \/ /
 * /  / // // // // // ___// / / // / / // ___// / / / / // // /\  // // / /__
 * \___//____ \\___//____//_/ _\_  / /_//____//_/ /_/ /_//_//_/ /_/ \__\_\___/
 *           \/              /____/
 * http://terminal.jcubic.pl
 *
 * Wrapper for options that will create autocomplete menu for jQuery Terminal
 *
 * Copyright (c) 2014-2023 Jakub Jankiewicz <https://jcubic.pl/me>
 * Released under the MIT license
 *
 */
!function (e) { var n; if ("undefined" != typeof window) n = window; else if ("undefined" != typeof self) n = self; else { if ("undefined" == typeof global) throw new Error("Unknow context"); n = global } "function" == typeof define && define.amd ? define(["jquery", "jquery.terminal"], e) : "object" == typeof module && module.exports ? module.exports = function (n, t) { return void 0 === t && (t = "undefined" != typeof window ? require("jquery") : require("jquery")(n)), t.fn.terminal || ("undefined" != typeof window ? require("jquery.terminal") : require("jquery.terminal")(t)), e(t), t } : e(n.jQuery) }((function (e) { var n = e.fn.terminal; function t(e) { this._fn = e } e.fn.terminal = function (i, o) { function r(r) { return n.call(r, i, function (n) { if (n && !n.autocompleteMenu) return n; var i, o, r = n || {}; function c(n, t, i, r) { for (var c = [], f = new RegExp("^" + e.terminal.escape_regex(i)), l = r.length; l--;)f.test(r[l]) && c.unshift(r[l]); if (9 === t.which && n.complete(c, { escape: p }) && (i = n.before_cursor(!0), f = new RegExp("^" + e.terminal.escape_regex(i))), i && c.length) { for (o.hide(), l = 0; l < c.length; ++l) { var u = c[l].replace(f, ""); u && e("<li>" + u + "</li>").appendTo(o) } o.show() } } if (void 0 !== r.completion) { var f, l = r.onInit || e.noop, u = r.keydown || e.noop, a = r.completion, p = r.completionEscape; delete r.completion, r.onInit = function (n) { l.call(this, n); var t = this.cmd().find(".cmd-cursor").wrap("<span/>").parent().addClass("cursor-wrapper"); (o = e("<ul></ul>").appendTo(t)).on("click", "li", (function () { n.insert(e(this).text()), o.empty() })) }, r.keydown = function (e, n) { return clearTimeout(f), f = setTimeout((function () { o.empty(); var r = n.before_cursor(!0); i && i.cancel(); var f = i = new t(c); if ("function" == typeof a) { var l = a.call(n, r, (function (t) { f.invoke(n, e, r, t) })); l && "function" == typeof l.then ? l.then((function (t) { f.invoke(n, e, r, t) })) : l instanceof Array && f.invoke(n, e, r, l) } else a instanceof Array && f.invoke(n, e, r, a) }), 0), void 0 === u.call(this, e, n) && (9 !== e.which && void 0) } } return r }(o)) } return this.length > 1 ? this.each(r.bind(null, this)) : r(this) }, t.prototype.invoke = function () { this._cancel || this._fn.apply(null, arguments) }, t.prototype.cancel = function () { this._cancel = !0 } }))