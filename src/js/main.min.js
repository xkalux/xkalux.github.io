import { initTetris, setTetrisStatus, TetrisStatus } from "./_tetris.min.js"; import { initClassX, getScoreBoard, local } from "../appscript/classx.min.js"; import { initUser } from "./_user.min.js"; import { initClassData } from "./_class-data.min.js"; import { createTerminalShortcut } from "./_terminal.min.js"; import { initSettingCommandCompletions } from "./_setting.min.js"; let tetris, tetrisPanel, isHasWindowOpen = !1; function onWindowOpen(e) { tetris && tetris.classList.add("hide"), tetrisPanel && tetrisPanel.classList.add("hide"), isHasWindowOpen = !0, setTetrisStatus(TetrisStatus.isPause) } function onWindowClose(e) { const t = document.querySelectorAll("x-window"); if (t.length <= 1) return isHasWindowOpen = !1, tetris.classList.remove("hide"), void tetrisPanel.classList.remove("hide"); t[0].windowElement.classList.add("active") } function updateScoreBoard() { sessionStorage.getItem("scoreboard") ? writeScoreToScoreBoard() : getScoreBoard((e => { e && (sessionStorage.setItem("scoreboard", "updated"), writeScoreToScoreBoard()) })) } function writeScoreToScoreBoard() { let e = localStorage.getItem("scoreboard"); if (!e) return; const t = JSON.parse(e); t.sort(((e, t) => t[3] - e[3])); const s = document.querySelector("#score-board .score-list"); s.innerHTML = "", t.forEach((e => { const t = document.createElement("div"); t.classList.add("item"), t.innerHTML = `\n        <span class="image"><img class='img-scoreboard' src='${e[1]}'></span>\n        <span class="name">${e[2]}</span>\n        <span class="score">${e[3]}</span>`, s.appendChild(t) })) } function updateLayout() { const e = document.querySelector("#tetris-panel #panel-display"), t = document.querySelector("#tetris #output").getBoundingClientRect(); e.style.width = t.width + 20 + "px", e.style.left = t.left - 10 + "px" } window.onload = () => { google.accounts.id.disableAutoSelect(), tetris = document.querySelector("#tetris"), tetrisPanel = document.querySelector("#tetris-panel"), initClassX("AKfycbwlq7MkJyIsNYsEb6stSMG6SwrNDlXasBLJhaMc76YjJ5oQj7dYDoYrvBLY_NTVixkJJg"), initUser(), initSettingCommandCompletions(), createTerminalShortcut(), initClassData(), initTetris(), updateLayout(), document.querySelector("#loadingFirstScreen")?.remove(), local("user") || updateScoreBoard(), window.addEventListener("resize", (() => { updateLayout() })) }; export { onWindowOpen, onWindowClose, isHasWindowOpen, updateScoreBoard, writeScoreToScoreBoard }