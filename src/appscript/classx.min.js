import { initUser } from "./../js/_user.min.js"; let url = ""; const jwtx = (e, t = 99) => e && local("client-sig") ? (e.message || (e.message = "clsx"), `${e.sig}.${e.message}.${local("client-sig")}.${e.raw}.${t}`) : "jwtx", defaultCallBack = function (e) { console.log("defaultCallBack"), console.log(e) }, prefix = "classX-", obj2t = e => btoa(JSON.stringify(e)), local = e => localStorage.getItem(e) || void 0, cacheScore = e => sessionStorage.getItem(prefix + e) || void 0, setCacheScore = (e, t) => sessionStorage.setItem(prefix + e, t), saveaccount = e => { const t = e.credential.split("."), a = extract(e.credential); localStorage.setItem("client-sig", t[2]), localStorage.setItem("user", JSON.stringify({ email: a.email, name: a.name, picture: a.picture, exp: a.exp, raw: t[1], sig: t[0] })), initUser() }, extract = e => { var t = e.split(".")[1].replace(/-/g, "+").replace(/_/g, "/"), a = decodeURIComponent(window.atob(t).split("").map((function (e) { return "%" + ("00" + e.charCodeAt(0).toString(16)).slice(-2) })).join("")); return JSON.parse(a) }, isExpire = e => { const t = new Date(1e3 * e + 432e5), a = new Date; return localStorage.setItem("exp-info", `login: ${a} , exp: ${t}`), localStorage.setItem("exp-0", e), localStorage.setItem("exp-1", 1e3 * e), localStorage.setItem("exp-2", 1e3 * e + 432e5), t < a }, initClassX = e => { url = `https://script.google.com/macros/s/${e}/exec`, google.accounts.id.initialize({ client_id: "616803848374-4c8sjfl8d94duv6u03vlvmog6bcfubbd.apps.googleusercontent.com", callback: saveaccount, cancel_on_tap_outside: !1, prompt_parent_id: "google-account", ux_mode: "popup", "data-itp_support": "true", login_uri: "https://xkalux.github.io/" }), google.accounts.id.renderButton(document.querySelector("#google-account"), { type: "standard", size: "large", text: "continue_with", shape: "rectangular", logo_alignment: "left" }) }, fetchRequest = async (e, t, a = "POST") => { const o = { method: a, headers: new Headers, redirect: "follow" }; "POST" === a && (o.body = e); fetch("POST" === a ? url : url + "?request=game-score", o).then((e => e.json())).then((e => { t(e) })).catch((e => console.log("error", e))) }, request = { GAMESCORE: "game-score", SAVEGAMESCORE: "save-game-score", GET_CLASS_DATA: "class-data", GET_SUBJECT_DATA: "subject-data" }, getClassData = async function (e = defaultCallBack) { const t = local("user"); if (t) { const a = JSON.parse(t); a.message = obj2t({ condition: "classX" }); const o = jwtx(a, 2024), s = new FormData; s.append("request", request.GET_CLASS_DATA), s.append("jwtx", o); const c = t => { if ("invalid-token" === t.status || "invalid-params" === t.status) return e({ token: "invalid", ...t }); e(t) }; await fetchRequest(s, c) } else e(void 0) }, getScoreBySubject = async (e, t, a = (e => { console.log(e) })) => { const o = local("user"); if (o) { const s = JSON.parse(o); s.message = obj2t(e); const c = jwtx(s, 2024), r = new FormData; r.append("request", request.GET_SUBJECT_DATA), r.append("jwtx", c); const n = e => { var o, s; o = t, s = JSON.stringify(e), sessionStorage.setItem(prefix + o, s), a(e) }; await fetchRequest(r, n) } else a(void 0) }, GetScoreBoard = async (e = (e => { console.log(e) })) => { const t = new FormData; await fetchRequest(t, (t => { if ("invalid-token" === t.status || "invalid-params" === t.status) return e({ token: "invalid", ...t }); localStorage.setItem("scoreboard", JSON.stringify(t.datas)), e(t) }), "GET") }, setScore = async (e, t = (e => { console.log(e) })) => { const a = local("user"); if (a) { const o = JSON.parse(a), s = "scoreboard"; o.message = obj2t({ opt: e }); const c = jwtx(o, e), r = new FormData; r.append("request", request.SAVEGAMESCORE), r.append("jwtx", c); const n = e => { if ("invalid-token" === e.status || "invalid-params" === e.status) return t({ token: "invalid", ...e }); localStorage.setItem(s, JSON.stringify(e.datas)), t(e) }; await fetchRequest(r, n) } else t(void 0) }; export { local, initClassX, isExpire, getClassData, getScoreBySubject, obj2t, cacheScore, GetScoreBoard as getScoreBoard, setScore, saveaccount }