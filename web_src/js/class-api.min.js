class api { request = { GET_SCOREBOARD: "game-score", SAVEGAMESCORE: "save-game-score", GET_CLASS_DATA: "class-data", GET_SUBJECT_DATA: "subject-data", GET_SLIDES: "slides" }; _fetchRequest(e, t, s) { fetch(e, t).then((e => e.json())).then((e => { s(e) })).catch((e => console.log("error", e))) } async _sendPostRequest(e, t) { const s = { method: "POST", headers: new Headers, redirect: "follow", body: e }; this._fetchRequest(this.url, s, t) } async _sendGetRequest(e, t) { const s = { method: "GET", headers: new Headers, redirect: "follow" }, a = this.url + "?" + e; this._fetchRequest(a, s, t) } async saveScore(e, t, s) { const a = new FormData; a.append("request", this.request.SAVEGAMESCORE), a.append("score", e.score), a.append("level", t), a.append("chk", this._getCkeckSumForSaveScore(e.email, e.score)), a.append("profileObjString", JSON.stringify({ email: e.email, picture: e.picture, name: e.name })), await this._sendPostRequest(a, (e => { if ("ok" !== e.status) return s({ status: e.status, ...e }); s(e) })) } _emailPoint(e) { let t = 0; for (let s = 0; s < e.length; s++)t += e.charCodeAt(s); return t } _getCkeckSumForSaveScore(e, t) { const s = btoa(e), a = (this._emailPoint(s) / (3 * +t)).toFixed(5); return btoa(a) } async getSubjectList(e, t) { const s = new FormData; s.append("request", this.request.GET_CLASS_DATA), s.append("email", btoa(e.email)), await this._sendPostRequest(s, (e => { if ("ok" !== e.status) return t({ status: e.status, ...e }); t(e) })) } async getSubjecData(e, t, s) { const a = new FormData; a.append("request", this.request.GET_SUBJECT_DATA), a.append("email", btoa(e.email)), a.append("subjectObjString", JSON.stringify(t)), await this._sendPostRequest(a, (e => { if ("ok" !== e.status) return s({ status: e.status, ...e }); s(e) })) } async getSlides(e) { const t = "request=" + this.request.GET_SLIDES; await this._sendGetRequest(t, (t => { if ("ok" !== t.status) return e({ status: t.status, ...t }); e(t) })) } async getScoreBoard(e) { const t = "request=" + this.request.GET_SCOREBOARD; await this._sendGetRequest(t, (t => { if ("ok" !== t.status) return e({ status: t.status, ...t }); e(t) })) } constructor(e) { this.url = `https://script.google.com/macros/s/${e}/exec` } } export { api as xClassAPI }