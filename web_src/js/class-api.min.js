class api { request = { GET_SCOREBOARD: "game-score", SAVEGAMESCORE: "save-game-score", GET_CLASS_DATA: "class-data", GET_SUBJECT_DATA: "subject-data", GET_SLIDES: "slides" }; _fetchRequest(t, e, s) { fetch(t, e).then((t => t.json())).then((t => { s(t) })).catch((t => console.log("error", t))) } async _sendPostRequest(t, e) { const s = { method: "POST", headers: new Headers, redirect: "follow", body: t }; this._fetchRequest(this.url, s, e) } async _sendGetRequest(t, e) { const s = { method: "GET", headers: new Headers, redirect: "follow" }, a = this.url + "?" + t; this._fetchRequest(a, s, e) } async saveScore(t, e, s, a) { const r = new FormData; r.append("request", this.request.SAVEGAMESCORE), r.append("score", e), r.append("level", s), r.append("chk", this._getCkeckSumForSaveScore(t.email, e)), r.append("profileObjString", JSON.stringify(t)), await this._sendPostRequest(r, (t => { if ("ok" !== t.status) return a({ status: t.status, ...t }); a(t) })) } _emailPoint(t) { let e = 0; for (let s = 0; s < t.length; s++)e += t.charCodeAt(s); return e } _getCkeckSumForSaveScore(t, e) { const s = btoa(t), a = (this._emailPoint(s) / (3 * +e)).toFixed(5); return btoa(a) } async getSubjectList(t, e) { const s = new FormData; s.append("request", this.request.GET_CLASS_DATA), s.append("email", btoa(t.email)), await this._sendPostRequest(s, (t => { if ("ok" !== t.status) return e({ status: t.status, ...t }); e(t) })) } async getSubjecData(t, e, s) { const a = new FormData; a.append("request", this.request.GET_SUBJECT_DATA), a.append("email", btoa(t.email)), a.append("subjectObjString", JSON.stringify(e)), await this._sendPostRequest(a, (t => { if ("ok" !== t.status) return s({ status: t.status, ...t }); s(t) })) } async getSlides(t) { const e = "request=" + this.request.GET_SLIDES; await this._sendGetRequest(e, (e => { if ("ok" !== e.status) return t({ status: e.status, ...e }); t(e) })) } async getScoreBoard(t) { const e = "request=" + this.request.GET_SCOREBOARD; await this._sendGetRequest(e, (e => { if ("ok" !== e.status) return t({ status: e.status, ...e }); t(e) })) } constructor(t) { this.url = `https://script.google.com/macros/s/${t}/exec` } } export { api as xClassAPI }