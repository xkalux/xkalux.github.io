const shapes = { A: [[0, 0, 1], [1, 1, 1]], B: [[2, 0, 0], [2, 2, 2]], C: [[0, 3, 0], [3, 3, 3]], D: [[4, 0, 4], [4, 4, 4]], E: [[5, 9], [5, 5]], F: [[6, 0], [6, 6]], f: [[0, 6], [6, 6]], G: [[7, 7, 0], [0, 7, 0], [0, 7, 7]], H: [[0, 8, 8], [0, 8, 0], [8, 8, 0]], I: [[1, 9, 0], [1, 1, 1]], J: [[0, 9, 2], [2, 2, 2]], K: [[1, 3, 1], [6, 2, 4], [1, 5, 1]], L: [[0, 0, 0], [3, 3, 3], [0, 0, 0]], M: [[1, 3, 0], [0, 5, 7]], M: [[0, 4, 2], [8, 6, 0]] }, rowMaster = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], gridMaster = [[...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster], [...rowMaster]]; let xclassAPIobj, getProfileFn, upcomingShape, grid = JSON.parse(JSON.stringify(gridMaster)), rndSeed = 1, currentShape = { x: 0, y: 0, shape: void 0 }, bag = [], bagIndex = 0; const bagSize = 5; let score = 0; const minInput_sensitive = 10; let input_sensitive = 30; const maxInput_sensitive = 200, initSpeed = 1e3, speedStepUpdate = .5; let speed = initSpeed; const minSpeed = 150; let draw = !0; const uiDock = document.querySelector("nav.ui-dock"); let pauseElement = document.createElement("div"); pauseElement.id = "pauseElement"; let gridElement = document.createElement("div"); gridElement.id = "gridElement"; let scoreElement = document.createElement("div"); scoreElement.id = "scoreElement"; let displayScoreElement = document.createElement("div"); displayScoreElement.id = "displayScoreElement"; let nextBlockElement = document.createElement("div"); nextBlockElement.id = "nextBlockElement"; let level = 1; const LEVEL = ["", "Beginner", "Standard", "Expert"]; let input = { x: 0, y: 0 }; const GameStatus = { isPause: "isPause", isPlaying: "isPlaying", isGameOver: "isGameOver", isInit: "isInit", isWaiting: "isWaiting", isStarting: "isStarting", Reset: "Reset", SaveScore: "SaveScore" }; let handheld, renderModeFn, handheldMODE, currentHandheldMODE, gameplayElement, settingElement, start, startForinput, gameStatus = GameStatus.isInit; async function savegame() { const e = getProfileFn(); if (e) { gameStatus = GameStatus.SaveScore, pauseElement.innerHTML = ""; const t = document.createElement("x-loading"); t.title = "Waiting for score to save", pauseElement.appendChild(t), pauseElement.classList.add("saving"), e.score = score, await xclassAPIobj.saveScore(e, LEVEL[level], (e => { if ("ok" === e.status) { const t = "SCOREBOARD", n = JSON.stringify(e.datas); localStorage.setItem(t, n), sessionStorage.setItem(t, "updated") } else pauseElement.innerHTML = `<div> Something went wrong! ðŸ˜¢</div>\n                <ul>\n                <li> Status: ${e.status}</li>\n                <li> Pleas contact @x-kalux on Discord</li>\n                </ul>`; gameStatus = GameStatus.isWaiting, takeAction(GameStatus.isWaiting) })) } else gameStatus = GameStatus.Reset } function OnPressHandler() { handheld.button_A.onTouchStart = () => input.y = 1, handheld.button_B.onTouchStart = () => input.y = 1, handheld.button_A.onTouchEnd = () => input.y = 0, handheld.button_B.onTouchEnd = () => input.y = 0, handheld.pad.onPadUpTouchStart = () => input.y = 1, handheld.pad.onPadUpTouchEnd = () => input.y = 0, handheld.pad.onPadLeftTouchStart = () => input.x = -1, handheld.pad.onPadLeftTouchEnd = () => input.x = 0, handheld.pad.onPadLeftDown = () => input.x = -1, handheld.pad.onPadLeftUp = () => input.x = 0, handheld.pad.onPadRightTouchStart = () => input.x = 1, handheld.pad.onPadRightTouchEnd = () => input.x = 0, handheld.pad.onPadRightDown = () => input.x = 1, handheld.pad.onPadRightUp = () => input.x = 0, handheld.pad.onPadDownTouchStart = () => input.y = -1, handheld.pad.onPadDownTouchEnd = () => input.y = 0, handheld.pad.onPadDownDown = () => input.y = -1, handheld.pad.onPadDownUp = () => input.y = 0, handheld.button_option_2.onPress = () => { if (currentHandheldMODE === handheldMODE.SETTING && (currentHandheldMODE = handheldMODE.PLAY_GAME, renderModeFn(currentHandheldMODE)), currentHandheldMODE === handheldMODE.PLAY_GAME) { switch (gameStatus) { case GameStatus.isPlaying: gameStatus = GameStatus.isPause; break; case GameStatus.isWaiting: case GameStatus.isPause: gameStatus = GameStatus.isPlaying; break; case GameStatus.isInit: case GameStatus.isGameOver: gameStatus = GameStatus.isStarting }takeAction(gameStatus) } }, handheld.button_option_1.onPress = () => { currentHandheldMODE = currentHandheldMODE === handheldMODE.PLAY_GAME ? handheldMODE.DISPLAY_SCOREBOARD : currentHandheldMODE === handheldMODE.DISPLAY_SCOREBOARD && gameStatus !== GameStatus.isPause ? handheldMODE.SETTING : handheldMODE.PLAY_GAME, gameStatus === GameStatus.isPlaying && (gameStatus = GameStatus.isPause), renderModeFn(currentHandheldMODE), takeAction(gameStatus) } } function initialize(e, t, n, a, r) { xclassAPIobj = r, getProfileFn = a, handheld = e, renderModeFn = t, handheldMODE = n, currentHandheldMODE = handheldMODE.DISPLAY_SCOREBOARD, gameplayElement = handheld.mainscreen.querySelector("#tetris-gameplay"), settingElement = handheld.mainscreen.querySelector("#tetris-setting"), OnPressHandler(), renderModeFn(currentHandheldMODE), gameplayElement.innerHTML = "<style>\n    font.text-0 {\n        color: var(--tetris-game-font-0-color);\n        font-weight: 900;\n    }\n    font.text-1 {\n        color: var(--tetris-game-font-1-color);\n        font-weight: 900;\n    }\n    \n    font.text-2 {\n        color: var(--tetris-game-font-2-color);\n        font-weight: 900;\n    }\n    \n    font.text-3 {\n        color: var(--tetris-game-font-3-color);\n        font-weight: 900;\n    }\n    \n    font.text-4 {\n        color: var(--tetris-game-font-4-color);\n        font-weight: 900;\n    }\n    \n    font.text-5 {\n        color: var(--tetris-game-font-5-color);\n        font-weight: 900;\n    }\n    \n    font.text-6 {\n        color: var(--tetris-game-font-6-color);\n        font-weight: 900;\n    }\n    \n    font.text-7 {\n        color: var(--tetris-game-font-7-color);\n        font-weight: 900;\n    }\n    \n    font.text-8 {\n        color: var(--tetris-game-font-8-color);\n        font-weight: 900;\n    }\n    \n    font.text-9 {\n        color: var(--tetris-game-font-9-color);\n        font-weight: 900;\n    }\n\n    #scoreElement{\n        margin-bottom: 5px;\n        display: flex;\n        justify-content: space-between;\n        max-height:60px;\n        min-height:60px;\n        overflow: hidden;\n        align-items: end;\n\n        & .next-wraper{\n            display: flex;\n            align-items: end;\n            max-height:60px;\n            min-height:60px;\n            \n            & #nextBlockElement{\n                display: flex;\n                align-items: end;\n                width:60px;\n                padding-right:10px;\n                padding-left:10px;\n                padding-top:0px;\n                padding-bottom:0px;\n\n                & .next-block{\n                    margin: 0;\n                    align-items: end;\n\n                    & p {\n                        margin: 0;\n                        padding: 0;\n                        font-size: 1.1rem;\n                        letter-spacing: -0.35rem;\n                        line-height: 1rem;\n                        & font{\n                            \n                            \n                        }\n                    }\n                }\n            }\n        }\n        & #displayScoreElement{\n            margin-left: 10px;\n        }\n        & #nextBlockElement{\n            max-height:60px;\n            min-height:60px;\n            overflow: hidden;\n        }\n    }\n    #gridElement {\n        border: 2px solid #ffffff66;\n        border-radius: 0.5em;\n        padding-top:10px;\n        padding-bottom:10px;\n        margin: 5px;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    \n        & p {\n            all: initial;\n            font-family: 'JetBrains Mono';\n            font-size: 1.5rem;\n            letter-spacing: -0.375rem;\n            line-height: 1.25rem;\n    \n            & :is(font.text-0) {\n                color: var(--tetris-game-font-0-color);\n            }\n        }\n    }\n    #gridElement.pause{\n        --tetris-game-font-0-color: var(--tetris-on-pause-color);\n        --tetris-game-font-1-color: var(--tetris-on-pause-color);\n        --tetris-game-font-2-color: var(--tetris-on-pause-color);\n        --tetris-game-font-3-color: var(--tetris-on-pause-color);\n        --tetris-game-font-4-color: var(--tetris-on-pause-color);\n        --tetris-game-font-5-color: var(--tetris-on-pause-color);\n        --tetris-game-font-6-color: var(--tetris-on-pause-color);\n        --tetris-game-font-7-color: var(--tetris-on-pause-color);\n        --tetris-game-font-8-color: var(--tetris-on-pause-color);\n        --tetris-game-font-9-color: var(--tetris-on-pause-color);\n    }\n\n    #pauseElement{\n        position: fixed;\n        border: 0.5rem solid #ffffffe5;\n        border-radius: 0.35rem;\n        top: 50%;\n        left: 50%;\n        padding-left: 1.5em;\n        padding-right: 1.5em;\n        text-align:center;\n        transform: translate(-50%, -50%);\n        background-color: #00000055;\n        width: 60%;\n\n        & h2 {\n            margin:0px;\n            padding-top: 10px;\n            padding-bottom: 10px;\n        }\n        & h5 {\n            margin:0px;\n            padding-bottom: 5px;\n        }\n        & p {\n            margin:0px;\n            font-size: 0.9rem;\n        }\n    }\n    #pauseElement.saving {\n        border: none;\n    }\n    </style>", gameplayElement.appendChild(scoreElement), gameplayElement.appendChild(gridElement), gameplayElement.appendChild(pauseElement), pauseElement.innerHTML = "\n    <p>press space-bar to</p>\n    <h2>Play</h2>\n    <p>the score is saved on sign-in</p>\n    "; const s = localStorage.getItem("input-sensitive"); s && (input_sensitive = s); const i = localStorage.getItem("tetris-difficulty"); i && (level = i < 0 ? 1 : i > 3 ? 3 : i), settingElement.innerHTML = `\n    <style>\n    #game-setting-page{\n        margin-left: 0.5rem;\n        margin-right: 0.5rem;\n        margin-top: 2rem;\n\n        & #setting-difficulty{\n            margin-left:1em;\n            margin-right:1em;\n            margin-top:0.5em;\n            display:flex;\n            justify-content: space-between;\n\n            & button{\n                width: 70px;\n                cursor: pointer;\n                background-color: #dddddd;\n            }\n            & button.level-selected{\n                background-color: #ffffff;\n                border: 4px solid #ffffff;\n                border-radius: 5px;\n            }\n        }\n    }\n    </style>\n    <div id='game-setting-page' style='text-align=center;'>\n        <div>Setting</div><hr><br>\n        Input-sensitive\n        <input type="range" min="10" max="200" value="${input_sensitive}" \n        class="slider" id="set-input-sensitive"> <span id='display-slider-value'>${input_sensitive}</span>\n        <br><br>\n        Difficulty : <span id='display-difficulty-value'>${LEVEL[level]}</span>\n        <div id='setting-difficulty'>\n            <button class='${1 == +level ? "level-selected" : ""} select-difficulty Beginner'>Beginner</button>\n            <button class='${2 == +level ? "level-selected" : ""} select-difficulty Standard'>Standard</button>\n            <button class='${3 == +level ? "level-selected" : ""} select-difficulty Expert'>Expert</button>\n        </div>\n    </div>\n    `, settingElement.querySelector(".slider").addEventListener("change", (() => { input_sensitive = settingElement.querySelector(".slider").value, settingElement.querySelector("#display-slider-value").textContent = input_sensitive, localStorage.setItem("input-sensitive", input_sensitive) })), settingElement.querySelector(".select-difficulty.Beginner").addEventListener("click", (() => { settingElement.querySelector(".select-difficulty.level-selected").classList.remove("level-selected"), settingElement.querySelector(".select-difficulty.Beginner").classList.add("level-selected"), level = 1, settingElement.querySelector("#display-difficulty-value").textContent = LEVEL[level], localStorage.setItem("tetris-difficulty", level) })), settingElement.querySelector(".select-difficulty.Standard").addEventListener("click", (() => { settingElement.querySelector(".select-difficulty.level-selected").classList.remove("level-selected"), settingElement.querySelector(".select-difficulty.Standard").classList.add("level-selected"), level = 2, settingElement.querySelector("#display-difficulty-value").textContent = LEVEL[level], localStorage.setItem("tetris-difficulty", level) })), settingElement.querySelector(".select-difficulty.Expert").addEventListener("click", (() => { settingElement.querySelector(".select-difficulty.level-selected").classList.remove("level-selected"), settingElement.querySelector(".select-difficulty.Expert").classList.add("level-selected"), level = 3, settingElement.querySelector("#display-difficulty-value").textContent = LEVEL[level], localStorage.setItem("tetris-difficulty", level) })), scoreElement.appendChild(displayScoreElement); const l = document.createElement("div"); l.classList.add("next-wraper"), l.innerHTML = "<div>Next: </div>", l.appendChild(nextBlockElement), scoreElement.appendChild(l), displayScoreElement.textContent = "Score: xxxxxx", nextBlockElement.textContent = "xxxxxxx", gameStatus = GameStatus.isInit, bagIndex = 0, generateBag(), nextShape(), renderScore(), renderGrid(), requestAnimationFrame(update) } function takeAction(e) { switch (gameStatus = e, e) { case GameStatus.isWaiting: uiDock.classList.remove("hide"), gameStatus = GameStatus.Reset, pauseElement.innerHTML = "\n            <p>press space-bar to</p>\n            <h2>Play</h2>\n            <p>the score is saved on sign-in</p>\n            ", pauseElement.classList.remove("saving"), pauseElement.classList.remove("hide"); break; case GameStatus.Reset: uiDock.classList.remove("hide"), score = 0, speed = initSpeed, grid = JSON.parse(JSON.stringify(gridMaster)), takeAction(GameStatus.isPlaying); break; case GameStatus.isStarting: speed = initSpeed, uiDock.classList.add("hide"), pauseElement.classList.remove("saving"), gridElement.classList.remove("pause"), pauseElement.classList.add("hide"), gameStatus = GameStatus.isPlaying; break; case GameStatus.isPause: pauseElement.innerHTML = "\n            <h2>PAUSE</h2>\n            ", uiDock.classList.remove("hide"), gridElement.classList.add("pause"), pauseElement.classList.remove("hide"); break; case GameStatus.isPlaying: uiDock.classList.add("hide"), gridElement.classList.remove("pause"), pauseElement.classList.add("hide"); break; case GameStatus.isGameOver: uiDock.classList.remove("hide"), pauseElement.innerHTML = `\n            <p>the score is saved on sign-in</p>\n            <h2>Game Over</h2>\n            <h5>Score: ${score}</h5>\n\n            `, pauseElement.classList.remove("hide"), savegame() } } function update(e) { void 0 === start && (start = e), updateInput(e); e - start > speed && (gameStatus === GameStatus.isPlaying && moveDown(), start = e, speed -= speedStepUpdate, level > 1 && (speed -= 2 * speedStepUpdate), level > 2 && (score -= 4 * speedStepUpdate)), speed < minSpeed && (speed = minSpeed), requestAnimationFrame(update) } function updateInput(e) { if (0 === input.y && 0 === input.x) return; void 0 === startForinput && (startForinput = e); e - startForinput > input_sensitive && (input.y > 0 && (rotateShape(), input.y = 0), input.y < 0 && moveDown(), input.x < 0 && moveLeft(), input.x > 0 && moveRight(), startForinput = void 0, requestAnimationFrame(updateInput)) } function renderGrid() { if (draw) { for (var e = "", t = 0; t < grid.length; t++)e += "<p>," + grid[t].toString() + "<p>"; gridElement.innerHTML = replaceColor(e) } } function replaceAll(e, t, n) { return e.replace(new RegExp(t, "g"), n) } function replaceColor(e) { return e = replaceAll(e, ",0", ",<font class='text-0'>,X</font>"), e = replaceAll(e, ",1", ",<font class='text-1'>,Ð®</font>"), e = replaceAll(e, ",2", ",<font class='text-2'>,Ð–</font>"), e = replaceAll(e, ",3", ",<font class='text-3'>,áºž</font>"), e = replaceAll(e, ",4", ",<font class='text-4'>,ÐŠ</font>"), e = replaceAll(e, ",5", ",<font class='text-5'>,Ð¯</font>"), e = replaceAll(e, ",6", ",<font class='text-6'>,â‚¬</font>"), e = replaceAll(e, ",7", ",<font class='text-7'>,Â¥</font>"), e = replaceAll(e, ",8", ",<font class='text-8'>,Â£</font>"), e = (e = replaceAll(e, ",9", ",<font class='text-9'>,#</font>")).replace(/,/g, " ") } function renderScore() { if (draw) { const e = Math.floor(initSpeed - speed); let t = `\n        <span style='font-size:0.7rem;'>${LEVEL[level]} Speed: ${e}</span><br>\n        <span style='font-size:0.9rem;'>Score: ${score}</span>\n        `; displayScoreElement.innerHTML = t, t = "<pre class='next-block'>"; for (let e = 0; e < upcomingShape.length; e++)t += "<p>," + upcomingShape[e] + "</p>"; t += "</pre>", nextBlockElement.innerHTML = replaceColor(t) } } function nextShape() { currentShape.shape = shapes[bag[bagIndex]], upcomingShape = shapes[bag[bagIndex + 1]], bagIndex += 1, bagIndex === bag.length - 1 && generateBag(), currentShape.x = Math.floor(grid[0].length / 2) - Math.ceil(currentShape.shape[0].length / 2), currentShape.y = 0 } function removeShape() { for (var e = 0; e < currentShape.shape.length; e++)for (var t = 0; t < currentShape.shape[e].length; t++)0 !== currentShape.shape[e][t] && (grid[currentShape.y + e][currentShape.x + t] = 0) } function collides(e, t) { for (var n = 0; n < t.shape.length; n++)for (var a = 0; a < t.shape[n].length; a++)if (0 !== t.shape[n][a] && (void 0 === e[t.y + n] || void 0 === e[t.y + n][t.x + a] || 0 !== e[t.y + n][t.x + a])) return !0; return !1 } function applyShape() { for (var e = 0; e < currentShape.shape.length; e++)for (var t = 0; t < currentShape.shape[e].length; t++)0 !== currentShape.shape[e][t] && (grid[currentShape.y + e][currentShape.x + t] = currentShape.shape[e][t]) } function clearRows() { for (var e = [], t = 0; t < grid.length; t++) { for (var n = !1, a = 0; a < grid[t].length; a++)0 === grid[t][a] && (n = !0); n || e.push(t) } 1 == e.length ? (score += 400, level > 1 && (score += 150), level > 2 && (score += 350)) : 2 == e.length ? (score += 800, level > 1 && (score += 350), level > 2 && (score += 700), level > 0 && (speed -= .5 * speedStepUpdate), level > 1 && (speed -= .75 * speedStepUpdate), level > 2 && (speed -= 1 * speedStepUpdate)) : 3 == e.length ? (score += 2e3, level > 1 && (score += 750), level > 2 && (score += 1e3), level > 0 && (speed -= 1 * speedStepUpdate), level > 1 && (speed -= 1.25 * speedStepUpdate), level > 2 && (speed -= 1.5 * speedStepUpdate)) : e.length >= 4 && (score += 5e3, level > 1 && (score += 1500), level > 2 && (score += 2e3), level > 0 && (speed -= 2 * speedStepUpdate), level > 1 && (speed -= 2.5 * speedStepUpdate), level > 2 && (speed -= 3 * speedStepUpdate)); for (var r = e.length - 1; r >= 0; r--)grid.splice(e[r], 1); for (; grid.length < gridMaster.length;)grid.unshift([...rowMaster]) } function transpose(e) { return e[0].map((function (t, n) { return e.map((function (e) { return e[n] })) })) } function rotate(e, t) { for (var n = 0; n < t; n++) { e = transpose(e); for (var a = 0; a < e.length; a++)e[a].reverse() } return e } function rotateShape() { removeShape(), currentShape.shape = rotate(currentShape.shape, 1), collides(grid, currentShape) && (currentShape.shape = rotate(currentShape.shape, 3)), applyShape(), renderGrid() } function moveDown() { removeShape(), currentShape.y++, collides(grid, currentShape) && (currentShape.y--, applyShape(), nextShape(), clearRows(), collides(grid, currentShape) && (gameStatus = GameStatus.isGameOver, renderScore(), renderGrid(), applyShape(), nextShape(), renderGrid(), applyShape(), nextShape(), renderGrid(), takeAction(GameStatus.isGameOver))), gameStatus === GameStatus.isPlaying && (applyShape(), score += 1, renderScore(), renderGrid()) } function moveLeft() { removeShape(), currentShape.x--, collides(grid, currentShape) && currentShape.x++, applyShape(), renderGrid() } function moveRight() { removeShape(), currentShape.x++, collides(grid, currentShape) && currentShape.x--, applyShape(), renderGrid() } function generateBag() { bag = []; let e = []; for (var t = 0; t < bagSize; t++) { let n = randomKey(shapes); for (; e.indexOf(n) >= 0;)n = randomKey(shapes); bag[t] = n, e.push(n) } bagIndex = 0 } function randomKey(e) { var t = Object.keys(e); return t[seededRandom(0, t.length)] } function seededRandom(e, t) { t = t || 1, e = e || 0, rndSeed = (9301 * rndSeed + 49297) % 233280; var n = rndSeed / 233280; return Math.floor(e + n * (t - e)) } window.onkeyup = function (e) { input.x = 0, input.y = 0 }, window.onkeydown = function (e) { "#game" === window.location.hash && (32 == e.keyCode ? gameStatus === GameStatus.isPlaying ? takeAction(GameStatus.isPause) : gameStatus === GameStatus.isPause ? takeAction(GameStatus.isPlaying) : gameStatus === GameStatus.isInit ? takeAction(GameStatus.isStarting) : gameStatus === GameStatus.Reset && takeAction(GameStatus.Reset) : 38 != e.keyCode && 87 != e.keyCode || gameStatus !== GameStatus.isPlaying ? 40 != e.keyCode && 83 != e.keyCode || gameStatus !== GameStatus.isPlaying ? 37 != e.keyCode && 65 != e.keyCode || gameStatus !== GameStatus.isPlaying ? 39 != e.keyCode && 68 != e.keyCode || gameStatus !== GameStatus.isPlaying || (input.x = 1) : input.x = -1 : input.y = -1 : rotateShape(), renderGrid()) }; export { initialize as initTetris }