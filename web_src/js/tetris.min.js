let tetrisElement, scoreboardElement, gameplayElement, settingElement, xclassAPIobj; const MODE = { DISPLAY_SCOREBOARD: "DISPLAY_SCOREBOARD", PLAY_GAME: "PLAY_GAME", SETTING: "SETTING_GAME" }, handheld = document.createElement("nintendo-game-watch"), key = "SCOREBOARD"; function renderTetris(n, e, t, a) { (n || e) && (xclassAPIobj = n, tetrisElement = document.createElement("div"), tetrisElement.id = "tetris-game", scoreboardElement = document.createElement("div"), scoreboardElement.id = "tetris-scoreboard", gameplayElement = document.createElement("div"), gameplayElement.id = "tetris-gameplay", settingElement = document.createElement("div"), settingElement.id = "tetris-setting", e.appendChild(tetrisElement), tetrisElement.appendChild(handheld), handheld.mainscreen.appendChild(scoreboardElement), handheld.mainscreen.appendChild(gameplayElement), handheld.mainscreen.appendChild(settingElement), handheld.button_option_2.setAttribute("text", "Start"), handheld.button_option_1.setAttribute("text", "Select"), a(handheld, render, MODE, t, n)) } function render(n) { n === MODE.DISPLAY_SCOREBOARD ? (scoreboardElement.classList.remove("hide"), gameplayElement.classList.add("hide"), settingElement.classList.add("hide"), display_score_board()) : n === MODE.PLAY_GAME ? (scoreboardElement.classList.add("hide"), gameplayElement.classList.remove("hide"), settingElement.classList.add("hide")) : n === MODE.SETTING && (scoreboardElement.classList.add("hide"), gameplayElement.classList.add("hide"), settingElement.classList.remove("hide")) } const scoreboardStyle = "\n<style>\n    #scoreboard-containner{\n        \n        & div {\n            display: flex;\n            border-bottom: 0.1em solid #ffffff57;\n            color: rgba(240, 248, 255, 0.534);\n            margin-left: 0.5rem;\n            margin-right: 0.5rem;\n            & :is(.rank-1) {\n                color: rgba(240, 248, 255, 1);\n            }\n    \n            & :is(.rank-2) {\n                color: rgba(240, 248, 255, 0.9);\n            }\n    \n            & :is(.rank-3) {\n                color: rgba(240, 248, 255, 0.8);\n            }\n    \n            & :is(.rank-1 p) {\n                color: rgba(240, 248, 255, 1);\n                font-weight: 600;\n                letter-spacing: 0.05rem;\n            }\n    \n            & :is(.rank-2 p) {\n                color: rgba(240, 248, 255, 0.9);\n                font-weight: 500;\n                letter-spacing: 0.05rem;\n            }\n    \n            & :is(.rank-3 p) {\n                color: rgba(240, 248, 255, 0.8);\n                font-weight: 500;\n                letter-spacing: 0.05rem;\n            }\n    \n            & span {\n                \n                margin-top: 0.5rem;\n                display: flex;\n                align-items: center;\n                font-size: 1.2rem;\n                color :rgba(240, 248, 255, 0.7);\n                &:nth-of-type(1) {\n                    padding-left: 0.3rem;\n                    width: 30px;\n                }\n    \n                &:nth-of-type(2) {\n                    padding-right:0.5rem;\n                    justify-content: center;\n                    & :is(img) {\n                        width: 40px;\n                        border-radius: 0.35em;\n                    }\n                }\n    \n                &:nth-of-type(3) {\n                    flex: 3;\n                    flex-direction: column;\n                    justify-content: flex-start;\n                    align-items: inherit;\n                    \n                    & :is(p) {\n                        margin: 0.2em;\n                        padding: 0;\n                    }\n    \n                    & :is(p:nth-of-type(1)) {\n                        padding-left: 0em;\n                        padding-bottom: 0px;\n                        margin-bottom: 0px;\n                    }\n    \n                    & :is(p:nth-of-type(2)) {\n                        position:relative;\n                        top: -5px;\n                        padding-left: 0.25em;\n                        font-size:0.7rem;\n                    }\n                }\n    \n                &:nth-of-type(4) {\n                    display: flex;\n                    justify-content: flex-end;\n                    align-items: end;\n                    flex: 3;\n                    flex-direction: column;\n                    padding-right: 1em;\n                    & :is(p){\n                        \n                        justify-content: flex-end;\n                        margin: 0.2em;\n                        padding: 0;\n                        position:relative;\n                        top: -5px;\n                        font-size:0.7rem;\n                    }\n                }\n            }\n    \n        }\n        & div.score-board-title {\n            border: none;\n            display: flex;\n            color: #fff;\n            border-bottom: 1px solid #ffffff99;\n            margin-left: 0.5rem;\n            margin-right: 0.5rem;\n            & :is(span.title) {\n                justify-content: start;\n                font-family: 'JetBrains Mono';\n                color: inherit;\n                font-size: 1.2rem;\n                flex: 1\n            }\n        }\n    }\n    </style>\n"; function display_score_board() { let n = `${scoreboardStyle}\n    <div class='score-board-title'><span class='title'>Score Board</span></div>`; const e = document.createElement("div"); e.id = "scoreboard-containner", scoreboardElement.innerHTML = "", scoreboardElement.appendChild(e), e.innerHTML = n; const t = localStorage.getItem(key); if (t) { const n = JSON.parse(t); n.sort(((n, e) => e[3] - n[3])); for (let t = 0; t < n.length; t++) { const a = t + 1, i = n[t], r = document.createElement("div"); let s = "noob"; i[4] && "" !== i[4] && (s = i[4]), r.classList.add("rank-" + a), r.innerHTML = `\n            <span class='rank-${a}'>${a}</span>\n            <span class='rank-${a}'><img class='rank-${a}' src='${i[1]}' alt='user-pic'></span>\n            <span class='rank-${a}'>${i[2].toString().split(" ").map((n => `<p>${n}</p>`)).join("")}</span>\n            <span class='rank-${a}'>${(+i[3]).toLocaleString("en-US")}<p>${s}</></span>\n            `, e.appendChild(r) } } sessionStorage.getItem(key) || xclassAPIobj.getScoreBoard((n => { if ("ok" === n.status) { const e = JSON.stringify(n.datas); localStorage.setItem(key, e), sessionStorage.setItem(key, "updated"), display_score_board() } })) } export { renderTetris }