class CircleButton extends HTMLElement { constructor() { super(), this.attachShadow({ mode: "open" }) } static get styles() { return "\n      :host {\n        display: grid;\n        place-items: center;\n        place-content: center;\n      }\n\n      .button-container {\n        --size: 50px;\n\n        background : #940315;\n        width: var(--size);\n        height: var(--size);\n        border-radius: 50%;\n        display: grid;\n        border: 2px solid #0006;\n        place-items: center;\n        box-shadow:\n          1px 1px 0 #fff5 inset,\n          -3px -3px 4px #0005 inset,\n          0 2px 0 #fff7;\n\n        & .button {\n          --size: 80%;\n\n          width: var(--size);\n          height: var(--size);\n          border: 2px solid #0009;\n          border-radius: 50%;\n          background: linear-gradient(-30deg, #a31228, #e64451);\n          box-shadow:\n            2px 2px 3px #fff2 inset,\n            -3px -3px 3px #0002 inset;\n\n          &:active {\n            box-shadow: none;\n            scale: 0.97;\n          }\n        }\n      }\n\n      .text {\n        font-family: sans-serif;\n        font-weight: bold;\n        text-align: center;\n        color: #222;\n        padding-top: 0.5rem;\n      }\n    " } static observedAttributes = ["text"]; attributeChangedCallback(n, t, e) { "text" === n && "" !== e && (this.text = e) } onClick = () => { }; onMouseDown = () => { }; onMouseUp = () => { }; onTouchStart = () => { }; onTouchEnd = () => { }; connectedCallback() { this.render(); const n = this.shadowRoot.querySelector(".button"); n.addEventListener("mousedown", (() => { this.onMouseDown() })), n.addEventListener("mouseup", (() => { this.onMouseUp() })), n.addEventListener("touchstart", (() => { this.onTouchStart() })), n.addEventListener("touchend", (() => { this.onTouchEnd() })), n.addEventListener("click", (() => { this.onClick() })) } render() { this.shadowRoot.innerHTML = `\n    <style>${CircleButton.styles}</style>\n    <div class="container">\n\n      <div class="button-container">\n        <div class="button"></div>\n      </div>\n\n      <div class="text">${this.text}</div>\n\n    </div>` } } customElements.define("circle-button", CircleButton); class OptionButton extends HTMLElement { constructor() { super(), this.attachShadow({ mode: "open" }) } static get styles() { return "\n      :host {\n        display: flex;\n        place-items: center;\n        align-content: center;\n      }\n\n      .button-container {\n        \n        --width: 40px;\n        --height: calc(var(--width) * 0.6);\n\n        background: #940315;\n        width: var(--width);\n        margin: auto;\n        height: var(--height);\n        border-radius: 25px;\n        display: grid;\n        border: 2px solid #0006;\n        place-items: center;\n        box-shadow:\n          1px 1px 0 #fff5 inset,\n          -3px -3px 4px #0005 inset,\n          0 2px 0 #fff7;\n\n        & .button {\n          --width: 75%;\n          --height: 65%;\n\n          width: var(--width);\n          height: var(--height);\n          border: 1px solid #222;\n          border-radius: 25px;\n          background: #aca8a7;\n          box-shadow:\n            2px 2px 3px #fff5 inset,\n            -2px -2px 2px #0004 inset;\n\n          &:active {\n            box-shadow: none;\n            scale: 0.97;\n          }\n        }\n      }\n\n      .text {\n        font-family: var(--logo-font);\n        font-size: 0.8rem;\n        font-weight: bold;\n        color: #222;\n        padding-top: 0.2rem;\n        // width: var(--end-width);\n        text-align: center;\n      }\n    " } static observedAttributes = ["text"]; attributeChangedCallback(n, t, e) { "text" === n && "" !== e && (this.textEle.textContent = e) } onPress = () => { }; connectedCallback() { this.render(); const n = this.shadowRoot.querySelector(".button"); this.textEle = this.shadowRoot.querySelector(".text"), n.addEventListener("click", (() => { this.onPress() })) } render() { this.shadowRoot.innerHTML = `\n    <style>${OptionButton.styles}</style>\n    <div class="container">\n      <div class="button-container">\n        <div class="button"></div>\n      </div>\n      <div class="text">${this.text}</div>\n    </div>` } } customElements.define("option-button", OptionButton); class GameWatchPad extends HTMLElement { constructor() { super(), this.attachShadow({ mode: "open" }) } static get styles() { return '\n      :host {\n        /*transform: translateY(-30px);*/\n        user-select: none;\n      }\n\n      .container {\n        --size: calc(var(--width) * 0.32);\n        --border-color: #5b0a0a;\n        --round: 5px;\n\n        width: var(--size);\n        height: var(--size);\n        margin-top:9px;\n        filter:\n          /* drop-shadow(0 0 1px var(--model-color)) */\n          drop-shadow(6px 0 0 var(--model-color))\n          drop-shadow(0 -6px 0 var(--model-color))\n          drop-shadow(-6px 0 0 var(--model-color))\n          drop-shadow(0 6px 0 var(--model-color))\n          drop-shadow(0 -2px 0 #fff9)\n          drop-shadow(2px 0 0 var(--border-color))\n          drop-shadow(0 -2px 0 var(--border-color))\n          drop-shadow(0 1px 0 #0008)\n          drop-shadow(-2px 0 0 var(--border-color))\n          drop-shadow(0 2px 0 var(--border-color));\n\n        display: grid;\n        grid-template-areas:\n          ". up ."\n          "left center right"\n          ". down .";\n      }\n\n      .pad {\n        background: #26272b;\n        color: #111;\n        position: relative;\n\n        & span {\n          font-size: 2.5rem;\n          transform: translate(0, -10px);\n          display: inline-block;\n          position: absolute;\n          filter: drop-shadow(1px 1px 0 #fff7);\n        }\n      }\n\n      .up {\n        grid-area: up;\n        border-radius: var(--round) var(--round) 0 0;\n        filter:\n          drop-shadow(0 -2px 0 #fff7)\n          drop-shadow(-2px 0 0 #fff7)\n          drop-shadow(0 -3px 0 #111)\n          drop-shadow(3px 0 0 #111)\n          drop-shadow(-3px 0 0 #111);\n      }\n      .left {\n        grid-area: left;\n        border-radius: var(--round) 0 0 var(--round);\n        filter:\n          drop-shadow(0 -2px 0 #fff7)\n          drop-shadow(-2px 0 0 #fff7)\n          drop-shadow(0 3px 0 #111)\n          drop-shadow(0 -3px 0 #111)\n          drop-shadow(-3px 0 0 #111);\n      }\n      .center {\n        grid-area: center;\n        display: grid;\n        place-items: center;\n\n        & .gap {\n          --size: 25px;\n\n          width: var(--size);\n          height: var(--size);\n          border-radius: 50%;\n          background: #111;\n          background-image:\n            radial-gradient(#111, transparent, #111),\n            radial-gradient(\n              #111,\n              transparent\n            ),\n            conic-gradient(\n              transparent 0 55deg,\n              #fff6 115deg 140deg,\n              transparent 215deg 360deg\n            );\n          box-shadow: 0 -1px 1px #666 inset;\n          position: absolute;\n        }\n\n      }\n      .right {\n        grid-area: right;\n        border-radius: 0 var(--round) var(--round) 0;\n        filter:\n          drop-shadow(0 -2px 0 #fff7)\n          drop-shadow(0 3px 0 #111)\n          drop-shadow(0 -3px 0 #111)\n          drop-shadow(3px 0 0 #111);\n      }\n      .down {\n        grid-area: down;\n        border-radius: 0 0 var(--round) var(--round);\n        filter:\n          drop-shadow(-2px 0 0 #fff7)\n          drop-shadow(0 3px 0 #111)\n          drop-shadow(3px 0 0 #111)\n          drop-shadow(-3px 0 0 #111);\n      }\n    ' } onPadLeftClick = () => { }; onPadRightClick = () => { }; onPadDownClick = () => { }; onPadUpClick = () => { }; onPadLeftTouchStart = () => { }; onPadRightTouchStart = () => { }; onPadUpTouchStart = () => { }; onPadDownTouchStart = () => { }; onPadCenterTouchStart = () => { }; onPadLeftTouchEnd = () => { }; onPadRightTouchEnd = () => { }; onPadUpTouchEnd = () => { }; onPadDownTouchEnd = () => { }; onPadCenterTouchEnd = () => { }; onPadLeftDown = () => { }; onPadRightDown = () => { }; onPadUpDown = () => { }; onPadDownDown = () => { }; onPadCenterDown = () => { }; onPadLeftUp = () => { }; onPadRightUp = () => { }; onPadUpUp = () => { }; onPadDownUp = () => { }; onPadCenterUp = () => { }; connectedCallback() { this.render(), this.shadowRoot.querySelector(".pad.up").addEventListener("click", (() => { this.onPadUpClick() })), this.shadowRoot.querySelector(".pad.down").addEventListener("click", (() => { this.onPadDownClick() })), this.shadowRoot.querySelector(".pad.left").addEventListener("click", (() => { this.onPadLeftClick() })), this.shadowRoot.querySelector(".pad.right").addEventListener("click", (() => { this.onPadRightClick() })), this.shadowRoot.querySelector(".pad.up").addEventListener("mousedown", (() => { this.onPadUpDown() })), this.shadowRoot.querySelector(".pad.left").addEventListener("mousedown", (() => { this.onPadLeftDown() })), this.shadowRoot.querySelector(".pad.right").addEventListener("mousedown", (() => { this.onPadRightDown() })), this.shadowRoot.querySelector(".pad.down").addEventListener("mousedown", (() => { this.onPadDownDown() })), this.shadowRoot.querySelector(".pad.center").addEventListener("mousedown", (() => { this.onPadCenterDown() })), this.shadowRoot.querySelector(".pad.up").addEventListener("mouseup", (() => { this.onPadUpUp() })), this.shadowRoot.querySelector(".pad.left").addEventListener("mouseup", (() => { this.onPadLeftUp() })), this.shadowRoot.querySelector(".pad.right").addEventListener("mouseup", (() => { this.onPadRightUp() })), this.shadowRoot.querySelector(".pad.down").addEventListener("mouseup", (() => { this.onPadDownUp() })), this.shadowRoot.querySelector(".pad.center").addEventListener("mouseup", (() => { this.onPadCenterUp() })), this.shadowRoot.querySelector(".pad.up").addEventListener("touchstart", (() => { this.onPadUpTouchStart() })), this.shadowRoot.querySelector(".pad.left").addEventListener("touchstart", (() => { this.onPadLeftTouchStart() })), this.shadowRoot.querySelector(".pad.right").addEventListener("touchstart", (() => { this.onPadRightTouchStart() })), this.shadowRoot.querySelector(".pad.down").addEventListener("touchstart", (() => { this.onPadDownTouchStart() })), this.shadowRoot.querySelector(".pad.up").addEventListener("touchend", (() => { this.onPadUpTouchEnd() })), this.shadowRoot.querySelector(".pad.left").addEventListener("touchend", (() => { this.onPadLeftTouchEnd() })), this.shadowRoot.querySelector(".pad.right").addEventListener("touchend", (() => { this.onPadRightTouchEnd() })), this.shadowRoot.querySelector(".pad.down").addEventListener("touchend", (() => { this.onPadDownTouchEnd() })) } render() { this.shadowRoot.innerHTML = `\n    <style>${GameWatchPad.styles}</style>\n    <div class="container">\n      <div class="pad up">\n        <span>🡅</span>\n      </div>\n      <div class="pad left">\n        <span>🡄</span>\n      </div>\n      <div class="pad center">\n        <div class="gap"></div>\n      </div>\n      <div class="pad right">\n        <span>🡆</span>\n      </div>\n      <div class="pad down">\n        <span>🡇</span>\n      </div>\n    </div>` } } customElements.define("game-watch-pad", GameWatchPad); class GameWatchScreen extends HTMLElement { constructor() { super(), this.attachShadow({ mode: "open" }) } static get styles() { return "\n      :host {\n        display: grid;\n        place-items: center;\n        min-height: 100%;\n      }\n\n      .container {\n        width: 90%;\n        height: 96%;\n        border: 5px solid #efd1ab;\n        border-top-color: #f0d0aa;\n        border-left-color: #fbeacc;\n        border-right-color: #a27b40;\n        border-bottom-color: #704522;\n        border-radius: 8px;\n        box-shadow: 3px 3px 2px inset #fff;\n        filter: drop-shadow(-2px -2px 0 #fbefd9);\n        background: var(--aluminum-bg);\n        display: grid;\n        place-items: center;\n\n        --brand-font: Pretendo, sans-serif;\n        .brand {\n          font-family: var(--brand-font);\n          font-size: 0.75rem;\n          border: 3px solid #0006;\n          margin-bottom:10px;\n          padding: 1px 6px;\n          border-radius: 35px;\n          letter-spacing: 0.5px;\n          transform: translateY(-8px) scale(0.95);\n  \n          & sup {\n            font-family: sans-serif;\n            font-size: 0.5rem;\n          }\n        }\n      }\n\n      .game-screen-container {\n        width: 95%;\n        height: 500px;\n        margin-top:5px;\n        margin-bottom:15px;\n        background: #22223b;\n        border-radius: 10px;\n        display: flex;\n        flex-direction: column;\n        border: 2px solid #0006;\n        place-items: left;\n        box-shadow:\n          1px 1px 0 #fff5 inset,\n          -3px -3px 4px #0005 inset,\n          0 2px 0 #fff7;\n        overflow: hidden;\n        overflow-y: scroll;\n\n        & .hide{\n          display: none;\n        }\n      }\n\n      .game-screen-container::-webkit-scrollbar {\n        width: 0.2em;\n      }\n      \n      .game-screen-container.thin::-webkit-scrollbar {\n        width: 0.2em;\n      }\n      ::-webkit-scrollbar-track {\n        border-radius: 10px;\n        background: #eeeeee55;\n      }\n      \n      ::-webkit-scrollbar-thumb {\n        border-radius: 10px;\n        background: #d6282899;\n      }\n      \n      ::-webkit-scrollbar-thumb:window-inactive {\n        background: #d6282899;\n      }\n\n      .html5 { animation: blink 5s steps(2) backwards infinite 0s; }\n      .css3 { animation: blink 4s steps(2) backwards infinite 1s; }\n      .js { animation: blink 3s steps(2) backwards infinite 2s; }\n\n      .manzdev {\n        animation: move 2s steps(1) backwards infinite;\n      }\n\n      @keyframes move {\n        0%, 50%, 100% { translate: 0 2px; }\n        25%, 75% { translate: 0 10px; }\n      }\n\n      @keyframes blink {\n        0%, 49%, 100% { opacity: 0.3; }\n        50%, 99% { opacity: 1 }\n      }\n    " } connectedCallback() { this.render(), this.watchScreen = this.shadowRoot.querySelector(".game-screen-container") } render() { this.shadowRoot.innerHTML = `\n    <style>${GameWatchScreen.styles}</style>\n    <div class="container">\n      <div class="game-screen-container"></div>\n      <div class="brand">Notandin<sup>®</sup></div>\n    </div>` } } customElements.define("game-watch-screen", GameWatchScreen); class NintendoGameWatch extends HTMLElement { constructor() { super(), this.attachShadow({ mode: "open" }) } static get styles() { return '\n      :host {\n        display: inline-block;\n        border-radius: 5px;\n        overflow: hidden;\n      }\n\n      .container {\n        --width: 380px;\n        --height: 750px;\n        --model-color: #a6071d;\n        --logo-font: "Glacial Indifference", sans-serif;\n\n        --normal-font: "Louis George Cafe", sans-serif;\n        --shadow-model-color: color-mix(in srgb, var(--model-color), black 20%) linear-gradient(to right, transparent, #0003);\n        --aluminum-color: #d8c7a9;\n        --aluminum-bg:\n          repeating-linear-gradient(\n            90deg,\n            #0000 0 1px,\n            #00000005 3px 4px,\n            #0000 5px 6px\n          ),\n          linear-gradient(-25deg, #0004, #fff4),\n          var(--aluminum-color);\n\n        width: var(--width);\n        height: var(--height);\n        background: var(--model-color);\n        display: grid;\n\n        grid-template-rows: 10px 1fr 10px;\n\n        & .top {\n          background: var(--shadow-model-color);\n          box-shadow:\n            0 -2px 2px #fff5 inset,\n            0 1px 2px #0007 inset;\n        }\n\n        & .center {\n          display: grid;\n          grid-template-rows: 1fr 135px;\n          margin: 8px;\n          background:\n            linear-gradient(-25deg, #82681b56, transparent),\n            var(--aluminum-bg);\n          background-size: 100% 100%, 15px 25px, 100% 100%;\n          border-radius: 5px;\n          box-shadow:\n            0 2px 0 #59030f,\n            0 3px 0 #fffb;\n          \n          & .center-top{\n            & .screen {\n            \n            }\n \n          }\n\n          & .center-bottom{\n            transform: translateY(-10px) scale(0.95);\n            display: flex;\n            justify-content: space-between;\n            & .left {\n\n              margin-left:20px;\n              & game-watch-pad {\n\n              }\n            }\n  \n            & .right {\n              all: initial;\n              display: flex;\n              flex-direction: column;\n              align-items: center;\n              justify-items: center;\n              justify-content: flex-start;\n              \n              & .options {\n                display: flex;\n                align-items: center;\n                & option-button {\n                  display: block;\n                  width: 80px;\n                  block-size: fit-content;\n                }\n                & option-button.hide {\n                  display:none;\n                }\n              }\n  \n              & .buttons {\n                display: flex;\n                padding-top: 5px;\n                justify-content: center;\n                gap: 30px;\n              }\n  \n            }\n          }\n        }\n\n        & .bottom {\n          background: var(--shadow-model-color);\n          box-shadow:\n          0 -2px 2px #0007 inset;\n        }\n      }\n    ' } connectedCallback() { this.render(); const n = this.shadowRoot.querySelector(".left"); this.pad = document.createElement("game-watch-pad"), n.appendChild(this.pad); const t = this.shadowRoot.querySelector(".screen"), e = document.createElement("game-watch-screen"); t.appendChild(e), this.mainscreen = e.watchScreen; const o = this.shadowRoot.querySelector(".center .options"); this.button_option_1 = document.createElement("option-button"), this.button_option_1.text = "Select", o.appendChild(this.button_option_1), this.button_option_2 = document.createElement("option-button"), this.button_option_2.text = "Start", o.appendChild(this.button_option_2); const a = this.shadowRoot.querySelector(".right .buttons"); this.button_A = document.createElement("circle-button"), this.button_A.text = "A", a.appendChild(this.button_A), this.button_B = document.createElement("circle-button"), this.button_B.text = "B", a.appendChild(this.button_B) } render() { this.shadowRoot.innerHTML = `\n    <style>${NintendoGameWatch.styles}</style>\n    <div class="container">\n      <div class="top"></div>\n      <div class="center">\n        <div class="center-top">\n          <div class="screen">\n            \n          </div>\n        </div>\n        <div class="center-bottom">\n          <div class="left"> </div>\n          <div class="right">\n            <div class="options"></div>\n            <div class="buttons"></div>\n          </div>\n        </div>\n\n      </div>\n      <div class="bottom"></div>\n    </div>` } } customElements.define("nintendo-game-watch", NintendoGameWatch)